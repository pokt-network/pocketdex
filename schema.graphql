# To improve query performance, we strongly suggest adding indexes to any field that you plan to filter or sort by
# Add the `@index` or `@index(unique: true)` annotation after any non-key field
# https://academy.subquery.network/build/graphql.html#indexing-by-non-primary-key-field

type EventAttribute @entity {
  id: ID!
  key: String!
  value: String!
  event: Event!
}

type SupplyDenom @entity {
  # ID is the supply coin denomination.
  id: ID!
}

type BlockIdParts @jsonField(indexed: false) {
  total: Int!
  hash: String!
}

type BlockId @jsonField(indexed: false) {
  hash: String!
  parts: BlockIdParts!
}

type BlockVersion @jsonField(indexed: false) {
  version: BigInt!
  app: Int!
}

type BlockHeader @jsonField {
  chainId: String!
  height: BigInt! @index
  time: Date!
  version: BlockVersion!
  lastBlockId: BlockId!
  lastCommitHash: String!
  dataHash: String!
  validatorsHash: String!
  nextValidatorsHash: String!
  consensusHash: String!
  appHash: String!
  lastResultsHash: String!
  evidenceHash: String!
  proposerAddress: String!
}

type BlockCommitSignature @jsonField(indexed: false) {
  blockIdFlag: Int!
  validatorAddress: String!
  timestamp: Date!
  signature: String!
}

type BlockLastCommit @jsonField(indexed: false) {
  id: ID!
  blockIdHash: String!
  blockIdPartsTotal: Int!
  blockIdPartsHash: String!
  height: BigInt! @index
  round: Int!
  signatures: [BlockCommitSignature]!
}

# This handle all the information that is coming with the block but is not often used
# but could help in some debug environment.
type BlockMetadata @entity {
  id: ID!
  blockId: BlockId!
  header: BlockHeader!
  # first block has this null on js
  lastCommit: BlockLastCommit
}

type Block @entity {
  id: ID! # The block header hash
  chainId: String! @index
  height: BigInt! @index
  timestamp: Date!
  proposerAddress: String!
  metadata: BlockMetadata!
  size: Int!
  # relations
  transactions: [Transaction] @derivedFrom(field: "block")
  messages: [Message] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
  balancesOfAccountByDenom: [Balance] @derivedFrom(field: "lastUpdatedBlock")
  supplies: [BlockSupply]! @derivedFrom(field: "block")
  # PARAMS
  appParams: [AppParam] @derivedFrom(field: "block")
  authParams: [AuthParam] @derivedFrom(field: "block")
  bankParams: [BankParam] @derivedFrom(field: "block")
  distributionParams: [DistributionParam] @derivedFrom(field: "block")
  gatewayParams: [GatewayParam] @derivedFrom(field: "block")
  govParams: [GovParam] @derivedFrom(field: "block")
  mintParams: [MintParam] @derivedFrom(field: "block")
  proofParams: [ProofParam] @derivedFrom(field: "block")
  serviceParams: [ServiceParam] @derivedFrom(field: "block")
  sessionParams: [SessionParam] @derivedFrom(field: "block")
  sharedParams: [SharedParam] @derivedFrom(field: "block")
  slashingParams: [SlashingParam] @derivedFrom(field: "block")
  stakingParams: [StakingParam] @derivedFrom(field: "block")
  supplierParams: [SupplierParam] @derivedFrom(field: "block")
  tokenomicsParams: [TokenomicsParam] @derivedFrom(field: "block")
  consensusParams: [ConsensusParam] @derivedFrom(field: "block")
}

type Transaction @entity {
  id: ID!
  block: Block!
  gasUsed: BigInt!
  gasWanted: BigInt!
  fees: [Coin]!
  memo: String
  # 0 = Success, 1 = Error
  status: Int!
  log: String
  timeoutHeight: BigInt @index
  # NB: only the first signer!
  signerAddress: String @index
  messages: [Message] @derivedFrom(field: "transaction")
}

type Message @entity {
  id: ID!
  typeUrl: String! @index
  json: String
  transaction: Transaction!
  block: Block!
}

type Event @entity {
  id: ID!
  type: String! @index
  attributes: [EventAttribute]! @derivedFrom(field: "event")
  transaction: Transaction
  block: Block!
}

type Coin @jsonField {
  denom: String!
  amount: String!
}

type NativeTransfer @entity {
  id: ID!
  toAddress: String! @index
  fromAddress: String! @index
  amounts: [Coin]!
  denom: String! @index
  message: Message!
  transaction: Transaction!
  block: Block!
}

type Account @entity {
  # id is the address
  id: ID!
  chainId: String! @index
  nativeBalanceChanges: [NativeBalanceChange]! @derivedFrom(field: "account")
  genesisBalances: [GenesisBalance] @derivedFrom(field: "account")
  balances: [Balance] @derivedFrom(field: "account")
  services: [Service] @derivedFrom(field: "owner")
}

type GenesisBalance @entity {
  id: ID!
  amount: BigInt!
  denom: String! @index
  account: Account!
}

type NativeBalanceChange @entity {
  id: ID!
  balanceOffset: BigInt!
  denom: String! @index
  account: Account!
  event: Event!
  transaction: Transaction
  block: Block!
}

type UnprocessedEntity @entity {
  id: ID!
  error: String!
  event: Event
  message: Message
  transaction: Transaction
  block: Block
}

type Service @entity {
  id: ID!
  name: String!
  computeUnitsPerRelay: BigInt!
  owner: Account!
  addServiceMsgs: [MsgAddService] @derivedFrom(field: "service")
}

type MsgStakeApplication @entity {
  id: ID!
  # we are not using Coin because we want to be able to query and sum by amount
  stakeAmount: BigInt!
  stakeDenom: String!
  transaction: Transaction!
  block: Block!
  application: Application! @index
  message: Message!
}

type MsgStakeApplicationService @entity {
  id: ID!
  stakeMsg: MsgStakeApplication!
  service: Service!
}

type MsgUnstakeApplication @entity {
  id: ID!
  application: Application! @index
  transaction: Transaction!
  block: Block!
  message: Message!
}

type DelegateToGatewayMsg @entity {
  id: ID!
  application: Application! @index
  gateway: Gateway! @index
  transaction: Transaction!
  block: Block!
  message: Message!
}

type MsgUndelegateFromGateway @entity {
  id: ID!
  application: Application! @index
  gateway: Gateway! @index
  transaction: Transaction!
  block: Block!
  message: Message!
}

type TransferApplicationMsg @entity {
  id: ID!
  sourceApplication: Application! @index
  destinationApplication: Application! @index
  transaction: Transaction!
  block: Block!
  message: Message!
}

type Application @entity {
  # id is the address
  id: ID!
  account: Account!
  # we are not using Coin because we want to be able to query and sum by amount
  stakeAmount: BigInt!
  stakeDenom: String!
  # 0 = Staked, 1 = Unstaking, 2 = Unstaked
  stakeStatus: Int!
  # Block where the msg to unstake the application was received
  unstakingBeginBlock: Block
  # Height of the block where the application is going to be unstaked/unbonded. Received with the EventApplicationUnbondingBegin event.
  unstakingEndHeight: BigInt
  # Reason for the application to be unstaked/unbonded. Received with the EventApplicationUnbondingBegin event.
  # 0 = ELECTIVE, 1 = BELOW_MIN_STAKE, 2 = TRANSFERRED
  unstakingReason: Int
  # Block where the application was unstaked/unbonded. Received with the EventApplicationUnbondingEnd event.
  unstakingEndBlock: Block
  stakeMsgs: [MsgStakeApplication] @derivedFrom(field: "application")
  unstakeMsgs: [MsgUnstakeApplication] @derivedFrom(field: "application")
  delegateMsgs: [MsgDelegateToGateway] @derivedFrom(field: "application")
  undelegateMsgs: [MsgUndelegateFromGateway] @derivedFrom(field: "application")
  sourceTransferMsgs: [MsgTransferApplication] @derivedFrom(field: "sourceApplication")
  destinationTransferMsgs: [MsgTransferApplication] @derivedFrom(field: "destinationApplication")
  sourceTransferBeginEvents: [EventTransferBegin] @derivedFrom(field: "source")
  destinationTransferBeginEvents: [EventTransferBegin] @derivedFrom(field: "destination")
  sourceTransferEndEvents: [EventTransferEnd] @derivedFrom(field: "source")
  destinationTransferEndEvents: [EventTransferEnd] @derivedFrom(field: "destination")
  sourceTransferErrorEvents: [EventTransferError] @derivedFrom(field: "source")
  destinationTransferErrorEvents: [EventTransferError] @derivedFrom(field: "destination")
  unstakingBeginEvents: [EventApplicationUnbondingBegin] @derivedFrom(field: "application")
  unstakingEndEvents: [EventApplicationUnbondingEnd] @derivedFrom(field: "application")
  # Block where the application was transferred from the source to this application
  transferredFromAt: Block
  sourceApplication: Application
  destinationApplication: Application
  transferBeginBlock: Block
  transferEndBlock: Block
  # Account because the destination application is created on transfer end
  transferringTo: Account
  transferEndHeight: BigInt
}

type ApplicationGateway @entity {
  id: ID!
  gateway: Gateway!
  application: Application!
}

type ApplicationService @entity {
  id: ID!
  application: Application!
  service: Service!
}

type EventTransferBegin @entity {
  # The ID of the event result of getEventId(event)
  id: ID!
  source: Application!
  destination: Application!
  transaction: Transaction!
  block: Block!
  event: Event!
}

type EventTransferEnd @entity {
  # The ID of the event result of getEventId(event)
  id: ID!
  source: Application!
  destination: Application!
  block: Block!
  event: Event!
}

type EventTransferError @entity {
  # The ID of the event result of getEventId(event)
  id: ID!
  source: Application!
  destination: Account!
  error: String!
  block: Block!
  event: Event!
}

type ApplicationUnbondingBeginEvent @entity {
  # The ID of the event result of getEventId(event)
  id: ID!
  application: Application!
  # 0 = ELECTIVE, 1 = BELOW_MIN_STAKE, 2 = TRANSFERRED
  reason: Int!
  sessionEndHeight: BigInt!
  unstakingEndHeight: BigInt!
  block: Block!
  event: Event!
}

type ApplicationUnbondingEndEvent @entity {
  # The ID of the event result of getEventId(event)
  id: ID!
  application: Application!
  # 0 = ELECTIVE, 1 = BELOW_MIN_STAKE, 2 = TRANSFERRED
  reason: Int!
  sessionEndHeight: BigInt!
  unstakingEndHeight: BigInt!
  block: Block!
  event: Event!
}

type Balance @entity {
  id: ID!
  account: Account! @index
  denom: String! @index
  amount: BigInt!
  lastUpdatedBlock: Block!
}

type GenesisFile @entity {
  # id is the initial height
  id: ID!
  raw: String!
}

type MsgStakeSupplier @entity {
  id: ID!
  signer: Account!
  supplier: Supplier!
  owner: Account!
  # we are not using Coin because we want to be able to query and sum by amount
  stakeAmount: BigInt!
  stakeDenom: String!
  block: Block!
  transaction: Transaction!
  message: Message!
  serviceConfigs: [MsgStakeSupplierService] @derivedFrom(field: "stakeMsg")
}

type MsgStakeSupplierService @entity {
  id: ID!
  stakeMsg: MsgStakeSupplier!
  service: Service!
  revShare: [SupplierRevShare]!
  endpoints: [SupplierEndpoint]!
}

type MsgUnstakeSupplier @entity {
  id: ID!
  signer: Account!
  supplier: Supplier!
  block: Block!
  transaction: Transaction!
  message: Message!
}

type Supplier @entity {
  # The ID is the operator address
  id: ID!
  operator: Account!
  owner: Account!
  # we are not using Coin because we want to be able to query and sum by amount
  stakeAmount: BigInt!
  stakeDenom: String!
  stakeMsgs: [MsgStakeSupplier] @derivedFrom(field: "supplier")
  unstakeMsgs: [MsgUnstakeSupplier] @derivedFrom(field: "supplier")
  unstakingBeginEvents: [EventSupplierUnbondingBegin] @derivedFrom(field: "supplier")
  unstakingEndEvents: [EventSupplierUnbondingEnd] @derivedFrom(field: "supplier")
  # 0 = Staked, 1 = Unstaking, 2 = Unstaked
  stakeStatus: Int!
  # Block where MsgUnstakeSupplier was received
  unstakingBeginBlock: Block
  # Height of the block where the supplier is going to be unstaked/unbonded.
  # This is received with the EventSupplierUnbondingBegin event.
  unstakingEndHeight: BigInt
  # Block where the supplier was unstaked/unbonded.
  # This is received with the EventSupplierUnbondingEnd event.
  unstakingEndBlock: Block
  serviceConfigs: [SupplierServiceConfig] @derivedFrom(field: "supplier")
}

type ConfigOption @jsonField {
  key: Int!
  value: String!
}

type SupplierEndpoint @jsonField {
  url: String!
  rpcType: Int!
  configs: [ConfigOption]!
}

type SupplierRevShare @jsonField {
  address: String!
  revSharePercentage: Float!
}

type SupplierServiceConfig @entity {
  id: ID!
  supplier: Supplier!
  service: Service!
  revShare: [SupplierRevShare]!
  endpoints: [SupplierEndpoint]!
}

type EventSupplierUnbondingBegin @entity {
  # The ID of the event result of getEventId(event)
  id: ID!
  supplier: Supplier!
  block: Block!
  transaction: Transaction!
  event: Event!
}

type EventSupplierUnbondingEnd @entity {
  # The ID of the event result of getEventId(event)
  id: ID!
  supplier: Supplier!
  block: Block!
  event: Event!
}

type MsgAddService @entity {
  # The ID of the message result of messageId(msg)
  id: ID!
  service: Service!
  name: String!
  computeUnitsPerRelay: BigInt!
  owner: Account!
  block: Block!
  transaction: Transaction!
  message: Message!
}

type Gateway @entity {
  # id is the address of the gateway
  id: ID!
  account: Account!
  # we are not using Coin because we want to be able to query and sum by amount
  stakeAmount: BigInt!
  stakeDenom: String!
  # 0 = Staked, 1 = Unstaking, 2 = Unstaked
  stakeStatus: Int!
  unstakingBeginBlock: Block
  unstakingEndBlock: Block
  stakeMsgs: [MsgStakeGateway] @derivedFrom(field: "gateway")
  unstakeMsgs: [MsgUnstakeGateway] @derivedFrom(field: "gateway")
  unstakedEvents: [EventGatewayUnstaked] @derivedFrom(field: "gateway")
}

type MsgStakeGateway @entity {
  id: ID!
  gateway: Gateway!
  # we are not using Coin because we want to be able to query and sum by amount
  stakeAmount: BigInt!
  stakeDenom: String!
  transaction: Transaction!
  block: Block!
  message: Message!
}

type MsgUnstakeGateway @entity {
  id: ID!
  gateway: Gateway!
  transaction: Transaction!
  block: Block!
  message: Message!
}

type EventGatewayUnstaked @entity {
  # The ID of the event result of getEventId(event)
  id: ID!
  gateway: Gateway!
  transaction: Transaction!
  block: Block!
  event: Event!
}

# PARAMS

type AppParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type AuthParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type BankParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type DistributionParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type GatewayParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type GovParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type MintParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type ProofParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type ServiceParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type SessionParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type SharedParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type SlashingParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type StakingParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type SupplierParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type TokenomicsParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type ConsensusParam @entity {
  id: ID!
  key: String! @index
  value: String!
  block: Block!
}

type AuthzExec @entity {
  id: ID!
  grantee: String! @index
  subMessages: [AuthzMsgExec]! @derivedFrom(field: "authzExec")
  message: Message!
  transaction: Transaction!
  block: Block!
}

# NB: AuthzExec --|{ Message join table
type AuthzMsgExec @entity {
  id: ID!
  authzExec: AuthzExec!
  message: Message!
}

type Supply @entity {
  id: ID!
  denom: String! @index
  amount: BigInt!
  blocks: [BlockSupply]! @derivedFrom(field: "supply")
}

# This entity is a Join between Block and Supply
type BlockSupply @entity {
  id: ID!
  block: Block!
  supply: Supply!
}
