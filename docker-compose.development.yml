services:
  postgres:
    build:
      context: .
      dockerfile: ./docker/postgres/pg.dockerfile
    image: pocket-network/pocketdex-postgres:16-alpine
    pull_policy: build
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pocketdex

  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_VERSION:-latest}
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 5050
    volumes:
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - ${PGADMIN_LISTEN_PORT}:5050
    networks:
      - pocketdex

  indexer:
    build:
      context: .
      dockerfile: ./docker/dev-node.dockerfile
      platforms:
        - ${PLATFORM}
    image: pocket-network/pocketdex:development
    pull_policy: build
    platform: ${PLATFORM}
    depends_on:
      "postgres":
        condition: service_healthy
    ports:
      - "3000:3000"
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_DATABASE: ${POSTGRES_DB}
      NODE_OPTIONS: ${NODE_OPTIONS}
      BATCH_SIZE: ${BATCH_SIZE}
      DB_SCHEMA: ${DB_SCHEMA}
      START_BLOCK: ${START_BLOCK}
      ENDPOINT: ${ENDPOINT}
      CHAIN_ID: ${CHAIN_ID}
      POCKETDEX_DB_BATCH_SIZE: ${POCKETDEX_DB_BATCH_SIZE:-5000}
      POCKETDEX_DB_PAGE_LIMIT: ${POCKETDEX_DB_PAGE_LIMIT:-5000}
      POCKETDEX_GENESIS: ${POCKETDEX_GENESIS:-/app/genesis.json}
    volumes:
      # Replaced ./:/app with individual tracked files to avoid the generated code go outside the container
      - ./schema.graphql:/app/schema.graphql
      - ./project.ts:/app/project.ts
      - ./proto:/app/proto
      # if you modify vendors/*, you need to rebuild the image
      # because handle the rebuild of those everytime is too much time between builds.
      - ./src:/app/src
      - ignore_types:/app/src/types
      - ignore_dist:/app/dist
      # UNCOMMENT IF U WILL USE LOCALNET
      # - ./genesis.json:/app/genesis.json
    command:
      - --subscription
      - --unfinalized-blocks=false
      - --allow-schema-migration
      - --timeout=60000
      - --store-cache-async=false
      - --store-flush-interval=10
      - --enable-cache=false
      - --kyve-endpoint=false
      - --query-limit=5000
      - --pg-pool-min=100
      - --pg-pool-max=300
      - --pg-pool-acquire=30000
      - --pg-pool-idle=10000
      - --pg-pool-evict=12000
      - ${SUBQUERY_NODE_EXTRA_PARAMS:-}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/ready" ]
      interval: 3s
      timeout: 5s
      retries: 103
    networks:
      - localnet_proxy
      - pocketdex

  query:
    image: subquerynetwork/subql-query:${SUBQUERY_GRAPHQL_ENGINE_VERSION}
    ports:
      - ${SUBQUERY_GRAPHQL_ENGINE_PORT:-3001}:3000
    depends_on:
      "postgres":
        condition: service_healthy
      "indexer":
        condition: service_healthy
    restart: always
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_DATABASE: ${POSTGRES_DB}
    command:
      - --name=${DB_SCHEMA}
      - --indexer=http://indexer:3000
      - --playground
      - --subscription
      - ${SUBQUERY_GRAPHQL_EXTRA_PARAMS:-}
    networks:
      - pocketdex

volumes:
  ignore_dist:
    driver: local
  ignore_types:
    driver: local
  postgres_data:
    driver: local

networks:
  pocketdex:
  localnet_proxy:
    external: true
    attachable: true

