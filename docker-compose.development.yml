services:
  postgres:
    build:
      context: .
      dockerfile: ./docker/pg-Dockerfile
      args:
        POSTGRES_VERSION: ${POSTGRES_VERSION}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pocketdex

  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_VERSION}
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 5050
    volumes:
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - ${PGADMIN_LISTEN_PORT}:5050
    networks:
      - pocketdex

  subquery-node:
    build:
      context: .
      dockerfile: ./docker/dev-node.dockerfile
      args:
        GENESIS_FILENAME: ${GENESIS_FILENAME:-testnet.json}
        NODE_ENV: ${ENV}
        CHAIN_ID: ${CHAIN_ID}
        ENDPOINT: ${ENDPOINT}
    image: pocket-network/pocketdex:development
    pull_policy: build
    depends_on:
      "postgres":
        condition: service_healthy
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_DATABASE: ${POSTGRES_DB}
      NODE_ENV: ${ENV}
      NODE_OPTIONS: ${NODE_OPTIONS}
      WORKERS: ${WORKERS}
      BATCH_SIZE: ${BATCH_SIZE}
      DB_SCHEMA: ${DB_SCHEMA}
      START_BLOCK: ${START_BLOCK}
      ENDPOINT: ${ENDPOINT}
      CHAIN_ID: ${CHAIN_ID}
    volumes:
      # Replaced ./:/app with individual tracked files to avoid the generated code go outside the container
      - ./genesis/${GENESIS_FILENAME:-testnet.json}:/app/genesis.json
      - ./schema.graphql:/app/schema.graphql
      - ./project.ts:/app/project.ts
      - ./proto:/app/proto
      - ./src:/app/src
      - ignore_types:/app/src/types
    command:
      - ${SUBQUERY_NODE_EXTRA_PARAMS:-}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://subquery-node:3000/ready"]
      interval: 3s
      timeout: 5s
      retries: 103
    networks:
      - localnet_proxy
      - pocketdex

  graphql-engine:
    image: subquerynetwork/subql-query:${SUBQUERY_GRAPHQL_ENGINE_VERSION}
    ports:
      - ${SUBQUERY_GRAPHQL_ENGINE_PORT}:3000
    depends_on:
      "postgres":
        condition: service_healthy
      "subquery-node":
        condition: service_healthy
    restart: always
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_DATABASE: ${POSTGRES_DB}
    command:
      - ${SUBQUERY_GRAPHQL_EXTRA_PARAMS:-}
      - --name=${DB_SCHEMA}
      - --indexer=http://subquery-node:3000
      - --playground
    networks:
      - pocketdex

volumes:
  ignore_dist:
    driver: local
  ignore_types:
    driver: local
  postgres_data:
    driver: local

networks:
  pocketdex:
  localnet_proxy:
    external: true
    attachable: true

