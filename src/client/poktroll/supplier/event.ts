// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: poktroll/supplier/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Supplier } from "../shared/supplier";

export const protobufPackage = "poktroll.supplier";

/** EventSupplierStaked is emitted with the commitment of the supplier stake message. */
export interface EventSupplierStaked {
  supplier: Supplier | undefined;
}

/** EventSupplierUnstaked is emitted with the commitment of the supplier unstake message. */
export interface EventSupplierUnbondingBegin {
  supplier: Supplier | undefined;
  unbondingHeight: number;
}

/**
 * EventSupplierUnbondingEnd is emitted with the commitment of last block of the
 * supplier unbonding period.
 */
export interface EventSupplierUnbondingEnd {
  supplier: Supplier | undefined;
  unbondingHeight: number;
}

function createBaseEventSupplierStaked(): EventSupplierStaked {
  return { supplier: undefined };
}

export const EventSupplierStaked: MessageFns<EventSupplierStaked> = {
  encode(message: EventSupplierStaked, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supplier !== undefined) {
      Supplier.encode(message.supplier, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSupplierStaked {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSupplierStaked();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.supplier = Supplier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSupplierStaked {
    return { supplier: isSet(object.supplier) ? Supplier.fromJSON(object.supplier) : undefined };
  },

  toJSON(message: EventSupplierStaked): unknown {
    const obj: any = {};
    if (message.supplier !== undefined) {
      obj.supplier = Supplier.toJSON(message.supplier);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSupplierStaked>, I>>(base?: I): EventSupplierStaked {
    return EventSupplierStaked.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSupplierStaked>, I>>(object: I): EventSupplierStaked {
    const message = createBaseEventSupplierStaked();
    message.supplier = (object.supplier !== undefined && object.supplier !== null)
      ? Supplier.fromPartial(object.supplier)
      : undefined;
    return message;
  },
};

function createBaseEventSupplierUnbondingBegin(): EventSupplierUnbondingBegin {
  return { supplier: undefined, unbondingHeight: 0 };
}

export const EventSupplierUnbondingBegin: MessageFns<EventSupplierUnbondingBegin> = {
  encode(message: EventSupplierUnbondingBegin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supplier !== undefined) {
      Supplier.encode(message.supplier, writer.uint32(10).fork()).join();
    }
    if (message.unbondingHeight !== 0) {
      writer.uint32(16).int64(message.unbondingHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSupplierUnbondingBegin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSupplierUnbondingBegin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.supplier = Supplier.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.unbondingHeight = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSupplierUnbondingBegin {
    return {
      supplier: isSet(object.supplier) ? Supplier.fromJSON(object.supplier) : undefined,
      unbondingHeight: isSet(object.unbondingHeight) ? globalThis.Number(object.unbondingHeight) : 0,
    };
  },

  toJSON(message: EventSupplierUnbondingBegin): unknown {
    const obj: any = {};
    if (message.supplier !== undefined) {
      obj.supplier = Supplier.toJSON(message.supplier);
    }
    if (message.unbondingHeight !== 0) {
      obj.unbondingHeight = Math.round(message.unbondingHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSupplierUnbondingBegin>, I>>(base?: I): EventSupplierUnbondingBegin {
    return EventSupplierUnbondingBegin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSupplierUnbondingBegin>, I>>(object: I): EventSupplierUnbondingBegin {
    const message = createBaseEventSupplierUnbondingBegin();
    message.supplier = (object.supplier !== undefined && object.supplier !== null)
      ? Supplier.fromPartial(object.supplier)
      : undefined;
    message.unbondingHeight = object.unbondingHeight ?? 0;
    return message;
  },
};

function createBaseEventSupplierUnbondingEnd(): EventSupplierUnbondingEnd {
  return { supplier: undefined, unbondingHeight: 0 };
}

export const EventSupplierUnbondingEnd: MessageFns<EventSupplierUnbondingEnd> = {
  encode(message: EventSupplierUnbondingEnd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supplier !== undefined) {
      Supplier.encode(message.supplier, writer.uint32(10).fork()).join();
    }
    if (message.unbondingHeight !== 0) {
      writer.uint32(16).int64(message.unbondingHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSupplierUnbondingEnd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSupplierUnbondingEnd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.supplier = Supplier.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.unbondingHeight = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSupplierUnbondingEnd {
    return {
      supplier: isSet(object.supplier) ? Supplier.fromJSON(object.supplier) : undefined,
      unbondingHeight: isSet(object.unbondingHeight) ? globalThis.Number(object.unbondingHeight) : 0,
    };
  },

  toJSON(message: EventSupplierUnbondingEnd): unknown {
    const obj: any = {};
    if (message.supplier !== undefined) {
      obj.supplier = Supplier.toJSON(message.supplier);
    }
    if (message.unbondingHeight !== 0) {
      obj.unbondingHeight = Math.round(message.unbondingHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSupplierUnbondingEnd>, I>>(base?: I): EventSupplierUnbondingEnd {
    return EventSupplierUnbondingEnd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSupplierUnbondingEnd>, I>>(object: I): EventSupplierUnbondingEnd {
    const message = createBaseEventSupplierUnbondingEnd();
    message.supplier = (object.supplier !== undefined && object.supplier !== null)
      ? Supplier.fromPartial(object.supplier)
      : undefined;
    message.unbondingHeight = object.unbondingHeight ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
