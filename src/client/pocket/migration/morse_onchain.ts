// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/migration/morse_onchain.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "pocket.migration";

/**
 * MorseAccountState is the onchain representation of all account state to be migrated from Morse.
 * It is NEVER persisted onchain but is a dependency of the MsgImportMorseClaimableAccount handler.
 * It's main purpose is to expose the #GetHash() method for verifying the integrity of all MorseClaimableAccounts.
 */
export interface MorseAccountState {
  accounts: MorseClaimableAccount[];
}

/**
 * MorseClaimableAccount is the onchain (persisted) representation of a Morse
 * account which is claimable as part of the Morse -> Shannon migration.
 * They are intended to be created during MorseAccountState import (see: MsgImportMorseClaimableAccount).
 * It is created ONLY ONCE and NEVER deleted (per morse_src_address per network / re-genesis).
 * It is updated ONLY ONCE, when it is claimed (per morse_src_address per network / re-genesis).
 */
export interface MorseClaimableAccount {
  /**
   * The bech32-encoded address of the Shannon account to which the claimed balance will be minted.
   * This field is intended to remain empty until the account has been claimed.
   */
  shannonDestAddress: string;
  /** The hex-encoded address of the Morse account whose balance will be claimed. */
  morseSrcAddress: string;
  /** The unstaked upokt tokens (i.e. account balance) available for claiming. */
  unstakedBalance:
    | Coin
    | undefined;
  /**
   * The staked tokens associated with a supplier actor which corresponds to this account address.
   * DEV_NOTE: A few contextual notes related to Morse:
   * - A Supplier is called a Servicer or Node (not a full node) in Morse
   * - All Validators are Servicers, not all servicers are Validators
   * - Automatically, the top 100 staked Servicers are validator
   * - This only accounts for servicer stake balance transition
   * TODO_MAINNET(@Olshansk): Develop a strategy for bootstrapping validators in Shannon by working with the cosmos ecosystem
   */
  supplierStake:
    | Coin
    | undefined;
  /** The staked tokens associated with an application actor which corresponds to this account address. */
  applicationStake:
    | Coin
    | undefined;
  /**
   * The Shannon height at which the account was claimed.
   * This field is intended to remain empty until the account has been claimed.
   */
  claimedAtHeight: number;
}

function createBaseMorseAccountState(): MorseAccountState {
  return { accounts: [] };
}

export const MorseAccountState: MessageFns<MorseAccountState> = {
  encode(message: MorseAccountState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accounts) {
      MorseClaimableAccount.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MorseAccountState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMorseAccountState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accounts.push(MorseClaimableAccount.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MorseAccountState {
    return {
      accounts: globalThis.Array.isArray(object?.accounts)
        ? object.accounts.map((e: any) => MorseClaimableAccount.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MorseAccountState): unknown {
    const obj: any = {};
    if (message.accounts?.length) {
      obj.accounts = message.accounts.map((e) => MorseClaimableAccount.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MorseAccountState>, I>>(base?: I): MorseAccountState {
    return MorseAccountState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MorseAccountState>, I>>(object: I): MorseAccountState {
    const message = createBaseMorseAccountState();
    message.accounts = object.accounts?.map((e) => MorseClaimableAccount.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMorseClaimableAccount(): MorseClaimableAccount {
  return {
    shannonDestAddress: "",
    morseSrcAddress: "",
    unstakedBalance: undefined,
    supplierStake: undefined,
    applicationStake: undefined,
    claimedAtHeight: 0,
  };
}

export const MorseClaimableAccount: MessageFns<MorseClaimableAccount> = {
  encode(message: MorseClaimableAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shannonDestAddress !== "") {
      writer.uint32(10).string(message.shannonDestAddress);
    }
    if (message.morseSrcAddress !== "") {
      writer.uint32(18).string(message.morseSrcAddress);
    }
    if (message.unstakedBalance !== undefined) {
      Coin.encode(message.unstakedBalance, writer.uint32(42).fork()).join();
    }
    if (message.supplierStake !== undefined) {
      Coin.encode(message.supplierStake, writer.uint32(50).fork()).join();
    }
    if (message.applicationStake !== undefined) {
      Coin.encode(message.applicationStake, writer.uint32(58).fork()).join();
    }
    if (message.claimedAtHeight !== 0) {
      writer.uint32(64).int64(message.claimedAtHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MorseClaimableAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMorseClaimableAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shannonDestAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.morseSrcAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.unstakedBalance = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.supplierStake = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.applicationStake = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.claimedAtHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MorseClaimableAccount {
    return {
      shannonDestAddress: isSet(object.shannonDestAddress) ? globalThis.String(object.shannonDestAddress) : "",
      morseSrcAddress: isSet(object.morseSrcAddress) ? globalThis.String(object.morseSrcAddress) : "",
      unstakedBalance: isSet(object.unstakedBalance) ? Coin.fromJSON(object.unstakedBalance) : undefined,
      supplierStake: isSet(object.supplierStake) ? Coin.fromJSON(object.supplierStake) : undefined,
      applicationStake: isSet(object.applicationStake) ? Coin.fromJSON(object.applicationStake) : undefined,
      claimedAtHeight: isSet(object.claimedAtHeight) ? globalThis.Number(object.claimedAtHeight) : 0,
    };
  },

  toJSON(message: MorseClaimableAccount): unknown {
    const obj: any = {};
    if (message.shannonDestAddress !== "") {
      obj.shannonDestAddress = message.shannonDestAddress;
    }
    if (message.morseSrcAddress !== "") {
      obj.morseSrcAddress = message.morseSrcAddress;
    }
    if (message.unstakedBalance !== undefined) {
      obj.unstakedBalance = Coin.toJSON(message.unstakedBalance);
    }
    if (message.supplierStake !== undefined) {
      obj.supplierStake = Coin.toJSON(message.supplierStake);
    }
    if (message.applicationStake !== undefined) {
      obj.applicationStake = Coin.toJSON(message.applicationStake);
    }
    if (message.claimedAtHeight !== 0) {
      obj.claimedAtHeight = Math.round(message.claimedAtHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MorseClaimableAccount>, I>>(base?: I): MorseClaimableAccount {
    return MorseClaimableAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MorseClaimableAccount>, I>>(object: I): MorseClaimableAccount {
    const message = createBaseMorseClaimableAccount();
    message.shannonDestAddress = object.shannonDestAddress ?? "";
    message.morseSrcAddress = object.morseSrcAddress ?? "";
    message.unstakedBalance = (object.unstakedBalance !== undefined && object.unstakedBalance !== null)
      ? Coin.fromPartial(object.unstakedBalance)
      : undefined;
    message.supplierStake = (object.supplierStake !== undefined && object.supplierStake !== null)
      ? Coin.fromPartial(object.supplierStake)
      : undefined;
    message.applicationStake = (object.applicationStake !== undefined && object.applicationStake !== null)
      ? Coin.fromPartial(object.applicationStake)
      : undefined;
    message.claimedAtHeight = object.claimedAtHeight ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
