// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/tokenomics/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  Claim,
  ProofRequirementReason,
  proofRequirementReasonFromJSON,
  proofRequirementReasonToJSON,
} from "../proof/types";

export const protobufPackage = "pocket.tokenomics";

/** TODO_CONSIDERATION: Consider prefixing these enums with CLAIM_EXPIRATION_REASON_ */
export enum ClaimExpirationReason {
  /** EXPIRATION_REASON_UNSPECIFIED - Default value, means may be valid */
  EXPIRATION_REASON_UNSPECIFIED = 0,
  /** PROOF_MISSING - A proof was required but not submitted */
  PROOF_MISSING = 1,
  /** PROOF_INVALID - A proof was submitted but was invalid */
  PROOF_INVALID = 2,
  UNRECOGNIZED = -1,
}

export function claimExpirationReasonFromJSON(object: any): ClaimExpirationReason {
  switch (object) {
    case 0:
    case "EXPIRATION_REASON_UNSPECIFIED":
      return ClaimExpirationReason.EXPIRATION_REASON_UNSPECIFIED;
    case 1:
    case "PROOF_MISSING":
      return ClaimExpirationReason.PROOF_MISSING;
    case 2:
    case "PROOF_INVALID":
      return ClaimExpirationReason.PROOF_INVALID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClaimExpirationReason.UNRECOGNIZED;
  }
}

export function claimExpirationReasonToJSON(object: ClaimExpirationReason): string {
  switch (object) {
    case ClaimExpirationReason.EXPIRATION_REASON_UNSPECIFIED:
      return "EXPIRATION_REASON_UNSPECIFIED";
    case ClaimExpirationReason.PROOF_MISSING:
      return "PROOF_MISSING";
    case ClaimExpirationReason.PROOF_INVALID:
      return "PROOF_INVALID";
    case ClaimExpirationReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * EventClaimExpired is emitted during settlement when a claim expires.
 * This is likely the result of a claim requiring an onchain proof not being submitted.
 * The claim cannot be settled, leading to that work never being rewarded.
 */
export interface EventClaimExpired {
  /** The claim that expired */
  claim:
    | Claim
    | undefined;
  /** The reason why the claim expired, leading to a Supplier being penalized (i.e. burn). */
  expirationReason: ClaimExpirationReason;
  /** Number of relays claimed to be in the session tree. */
  numRelays: number;
  /**
   * Number of compute units claimed in the session tree.
   * It is a function of the number of relays in the session tree and onchain parameters.
   */
  numClaimedComputeUnits: number;
  /**
   * Number of total estimated compute units of work done.
   * It is a function of the number of claimed compute units and the relay difficulty multiplier.
   */
  numEstimatedComputeUnits: number;
  /**
   * The amount of uPOKT claimed for the work done.
   * It is a function of the number of estimated compute units and the compute units to token multiplier.
   */
  claimedUpokt: string;
}

/**
 * EventClaimSettled is emitted during settlement whenever a claim is successfully settled.
 * It may or may not require a proof depending on various on-chain parameters and other factors.
 */
export interface EventClaimSettled {
  /** The claim that was settled. */
  claim:
    | Claim
    | undefined;
  /** Whether a proof was required for the claim to be settled. */
  proofRequirement: ProofRequirementReason;
  /** Number of relays claimed to be in the session tree. */
  numRelays: number;
  /**
   * Number of compute units claimed in the session tree.
   * It is a function of the number of relays in the session tree and onchain parameters.
   */
  numClaimedComputeUnits: number;
  /**
   * Number of estimated compute units claimed in the session tree.
   * It is a function of the number of claimed compute units and the relay difficulty multiplier for the particular service.
   */
  numEstimatedComputeUnits: number;
  /**
   * The uPOKT coin claimed to be rewarded for the work done as a function of
   * the number of estimated compute units and the compute units to token multiplier.
   */
  claimedUpokt: string;
}

/**
 * EventApplicationOverserviced is emitted when an Application's stake cannot cover the Supplier's claim.
 * This means the following will ALWAYS be strictly true:  effective_burn < expected_burn
 * - Number of tokens burnt from app stake < Number of tokens burnt from supplier stake
 */
export interface EventApplicationOverserviced {
  /** The application address consuming onchain services */
  applicationAddr: string;
  /** The supplier operator address providing onchain services */
  supplierOperatorAddr: string;
  /**
   * Expected number of tokens to be burnt from the application's stake.
   * A function of the actual amount of work claimed to be done.
   */
  expectedBurn: string;
  /**
   * Actual number of tokens burnt from the application's stake.
   * A function of the amount that could be covered (less than) relative to the amount of work claimed to be done.
   */
  effectiveBurn: string;
}

/**
 * EventSupplierSlashed is emitted when a supplier is slashed.enum
 * This can happen for in cases such as missing or invalid proofs for submitted claims.
 */
export interface EventSupplierSlashed {
  /** The claim the supplier is being slashed for. */
  claim:
    | Claim
    | undefined;
  /**
   * Amount slashed from the supplier's stake.
   * A function of the claim size, supplier stake, and various onchain parameters.
   */
  proofMissingPenalty: string;
}

/**
 * EventClaimDiscarded is emitted when a claim is discarded due to unexpected situations.
 * It is used to prevent chain halts in favor of some missing claims.
 */
export interface EventClaimDiscarded {
  /** The claim that was discarded. */
  claim:
    | Claim
    | undefined;
  /** The error that caused the claim to be discarded. */
  error: string;
}

/**
 * EventApplicationReimbursementRequest is emitted when an application requests a reimbursement from the DAO.
 * It is intended to prevent self dealing attacks when global inflation is enabled.
 * TODO_DISTANT_FUTURE: Remove this once global inflation is disabled in perpetuity.
 */
export interface EventApplicationReimbursementRequest {
  /** The application address consuming onchain services requesting reimbursement. */
  applicationAddr: string;
  /** The supplier operator address providing onchain services */
  supplierOperatorAddr: string;
  /** The supplier owner address providing onchain services */
  supplierOwnerAddr: string;
  /** The service ID associated with the session where a claim was submitted. */
  serviceId: string;
  /** The session ID associated with the session where a claim was submitted. */
  sessionId: string;
  /** The amount of uPOKT to be reimbursed to the application. */
  amount: string;
}

function createBaseEventClaimExpired(): EventClaimExpired {
  return {
    claim: undefined,
    expirationReason: 0,
    numRelays: 0,
    numClaimedComputeUnits: 0,
    numEstimatedComputeUnits: 0,
    claimedUpokt: "",
  };
}

export const EventClaimExpired: MessageFns<EventClaimExpired> = {
  encode(message: EventClaimExpired, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.claim !== undefined) {
      Claim.encode(message.claim, writer.uint32(10).fork()).join();
    }
    if (message.expirationReason !== 0) {
      writer.uint32(16).int32(message.expirationReason);
    }
    if (message.numRelays !== 0) {
      writer.uint32(24).uint64(message.numRelays);
    }
    if (message.numClaimedComputeUnits !== 0) {
      writer.uint32(32).uint64(message.numClaimedComputeUnits);
    }
    if (message.numEstimatedComputeUnits !== 0) {
      writer.uint32(40).uint64(message.numEstimatedComputeUnits);
    }
    if (message.claimedUpokt !== "") {
      writer.uint32(58).string(message.claimedUpokt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventClaimExpired {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventClaimExpired();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.claim = Claim.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.expirationReason = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.numRelays = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.numClaimedComputeUnits = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.numEstimatedComputeUnits = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.claimedUpokt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventClaimExpired {
    return {
      claim: isSet(object.claim) ? Claim.fromJSON(object.claim) : undefined,
      expirationReason: isSet(object.expirationReason) ? claimExpirationReasonFromJSON(object.expirationReason) : 0,
      numRelays: isSet(object.numRelays) ? globalThis.Number(object.numRelays) : 0,
      numClaimedComputeUnits: isSet(object.numClaimedComputeUnits)
        ? globalThis.Number(object.numClaimedComputeUnits)
        : 0,
      numEstimatedComputeUnits: isSet(object.numEstimatedComputeUnits)
        ? globalThis.Number(object.numEstimatedComputeUnits)
        : 0,
      claimedUpokt: isSet(object.claimedUpokt) ? globalThis.String(object.claimedUpokt) : "",
    };
  },

  toJSON(message: EventClaimExpired): unknown {
    const obj: any = {};
    if (message.claim !== undefined) {
      obj.claim = Claim.toJSON(message.claim);
    }
    if (message.expirationReason !== 0) {
      obj.expirationReason = claimExpirationReasonToJSON(message.expirationReason);
    }
    if (message.numRelays !== 0) {
      obj.numRelays = Math.round(message.numRelays);
    }
    if (message.numClaimedComputeUnits !== 0) {
      obj.numClaimedComputeUnits = Math.round(message.numClaimedComputeUnits);
    }
    if (message.numEstimatedComputeUnits !== 0) {
      obj.numEstimatedComputeUnits = Math.round(message.numEstimatedComputeUnits);
    }
    if (message.claimedUpokt !== "") {
      obj.claimedUpokt = message.claimedUpokt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventClaimExpired>, I>>(base?: I): EventClaimExpired {
    return EventClaimExpired.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventClaimExpired>, I>>(object: I): EventClaimExpired {
    const message = createBaseEventClaimExpired();
    message.claim = (object.claim !== undefined && object.claim !== null) ? Claim.fromPartial(object.claim) : undefined;
    message.expirationReason = object.expirationReason ?? 0;
    message.numRelays = object.numRelays ?? 0;
    message.numClaimedComputeUnits = object.numClaimedComputeUnits ?? 0;
    message.numEstimatedComputeUnits = object.numEstimatedComputeUnits ?? 0;
    message.claimedUpokt = object.claimedUpokt ?? "";
    return message;
  },
};

function createBaseEventClaimSettled(): EventClaimSettled {
  return {
    claim: undefined,
    proofRequirement: 0,
    numRelays: 0,
    numClaimedComputeUnits: 0,
    numEstimatedComputeUnits: 0,
    claimedUpokt: "",
  };
}

export const EventClaimSettled: MessageFns<EventClaimSettled> = {
  encode(message: EventClaimSettled, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.claim !== undefined) {
      Claim.encode(message.claim, writer.uint32(10).fork()).join();
    }
    if (message.proofRequirement !== 0) {
      writer.uint32(16).int32(message.proofRequirement);
    }
    if (message.numRelays !== 0) {
      writer.uint32(24).uint64(message.numRelays);
    }
    if (message.numClaimedComputeUnits !== 0) {
      writer.uint32(32).uint64(message.numClaimedComputeUnits);
    }
    if (message.numEstimatedComputeUnits !== 0) {
      writer.uint32(40).uint64(message.numEstimatedComputeUnits);
    }
    if (message.claimedUpokt !== "") {
      writer.uint32(66).string(message.claimedUpokt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventClaimSettled {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventClaimSettled();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.claim = Claim.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.proofRequirement = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.numRelays = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.numClaimedComputeUnits = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.numEstimatedComputeUnits = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.claimedUpokt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventClaimSettled {
    return {
      claim: isSet(object.claim) ? Claim.fromJSON(object.claim) : undefined,
      proofRequirement: isSet(object.proofRequirement) ? proofRequirementReasonFromJSON(object.proofRequirement) : 0,
      numRelays: isSet(object.numRelays) ? globalThis.Number(object.numRelays) : 0,
      numClaimedComputeUnits: isSet(object.numClaimedComputeUnits)
        ? globalThis.Number(object.numClaimedComputeUnits)
        : 0,
      numEstimatedComputeUnits: isSet(object.numEstimatedComputeUnits)
        ? globalThis.Number(object.numEstimatedComputeUnits)
        : 0,
      claimedUpokt: isSet(object.claimedUpokt) ? globalThis.String(object.claimedUpokt) : "",
    };
  },

  toJSON(message: EventClaimSettled): unknown {
    const obj: any = {};
    if (message.claim !== undefined) {
      obj.claim = Claim.toJSON(message.claim);
    }
    if (message.proofRequirement !== 0) {
      obj.proofRequirement = proofRequirementReasonToJSON(message.proofRequirement);
    }
    if (message.numRelays !== 0) {
      obj.numRelays = Math.round(message.numRelays);
    }
    if (message.numClaimedComputeUnits !== 0) {
      obj.numClaimedComputeUnits = Math.round(message.numClaimedComputeUnits);
    }
    if (message.numEstimatedComputeUnits !== 0) {
      obj.numEstimatedComputeUnits = Math.round(message.numEstimatedComputeUnits);
    }
    if (message.claimedUpokt !== "") {
      obj.claimedUpokt = message.claimedUpokt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventClaimSettled>, I>>(base?: I): EventClaimSettled {
    return EventClaimSettled.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventClaimSettled>, I>>(object: I): EventClaimSettled {
    const message = createBaseEventClaimSettled();
    message.claim = (object.claim !== undefined && object.claim !== null) ? Claim.fromPartial(object.claim) : undefined;
    message.proofRequirement = object.proofRequirement ?? 0;
    message.numRelays = object.numRelays ?? 0;
    message.numClaimedComputeUnits = object.numClaimedComputeUnits ?? 0;
    message.numEstimatedComputeUnits = object.numEstimatedComputeUnits ?? 0;
    message.claimedUpokt = object.claimedUpokt ?? "";
    return message;
  },
};

function createBaseEventApplicationOverserviced(): EventApplicationOverserviced {
  return { applicationAddr: "", supplierOperatorAddr: "", expectedBurn: "", effectiveBurn: "" };
}

export const EventApplicationOverserviced: MessageFns<EventApplicationOverserviced> = {
  encode(message: EventApplicationOverserviced, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.applicationAddr !== "") {
      writer.uint32(10).string(message.applicationAddr);
    }
    if (message.supplierOperatorAddr !== "") {
      writer.uint32(18).string(message.supplierOperatorAddr);
    }
    if (message.expectedBurn !== "") {
      writer.uint32(42).string(message.expectedBurn);
    }
    if (message.effectiveBurn !== "") {
      writer.uint32(50).string(message.effectiveBurn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventApplicationOverserviced {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventApplicationOverserviced();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.applicationAddr = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.supplierOperatorAddr = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.expectedBurn = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.effectiveBurn = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventApplicationOverserviced {
    return {
      applicationAddr: isSet(object.applicationAddr) ? globalThis.String(object.applicationAddr) : "",
      supplierOperatorAddr: isSet(object.supplierOperatorAddr) ? globalThis.String(object.supplierOperatorAddr) : "",
      expectedBurn: isSet(object.expectedBurn) ? globalThis.String(object.expectedBurn) : "",
      effectiveBurn: isSet(object.effectiveBurn) ? globalThis.String(object.effectiveBurn) : "",
    };
  },

  toJSON(message: EventApplicationOverserviced): unknown {
    const obj: any = {};
    if (message.applicationAddr !== "") {
      obj.applicationAddr = message.applicationAddr;
    }
    if (message.supplierOperatorAddr !== "") {
      obj.supplierOperatorAddr = message.supplierOperatorAddr;
    }
    if (message.expectedBurn !== "") {
      obj.expectedBurn = message.expectedBurn;
    }
    if (message.effectiveBurn !== "") {
      obj.effectiveBurn = message.effectiveBurn;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventApplicationOverserviced>, I>>(base?: I): EventApplicationOverserviced {
    return EventApplicationOverserviced.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventApplicationOverserviced>, I>>(object: I): EventApplicationOverserviced {
    const message = createBaseEventApplicationOverserviced();
    message.applicationAddr = object.applicationAddr ?? "";
    message.supplierOperatorAddr = object.supplierOperatorAddr ?? "";
    message.expectedBurn = object.expectedBurn ?? "";
    message.effectiveBurn = object.effectiveBurn ?? "";
    return message;
  },
};

function createBaseEventSupplierSlashed(): EventSupplierSlashed {
  return { claim: undefined, proofMissingPenalty: "" };
}

export const EventSupplierSlashed: MessageFns<EventSupplierSlashed> = {
  encode(message: EventSupplierSlashed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.claim !== undefined) {
      Claim.encode(message.claim, writer.uint32(10).fork()).join();
    }
    if (message.proofMissingPenalty !== "") {
      writer.uint32(26).string(message.proofMissingPenalty);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSupplierSlashed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSupplierSlashed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.claim = Claim.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proofMissingPenalty = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSupplierSlashed {
    return {
      claim: isSet(object.claim) ? Claim.fromJSON(object.claim) : undefined,
      proofMissingPenalty: isSet(object.proofMissingPenalty) ? globalThis.String(object.proofMissingPenalty) : "",
    };
  },

  toJSON(message: EventSupplierSlashed): unknown {
    const obj: any = {};
    if (message.claim !== undefined) {
      obj.claim = Claim.toJSON(message.claim);
    }
    if (message.proofMissingPenalty !== "") {
      obj.proofMissingPenalty = message.proofMissingPenalty;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSupplierSlashed>, I>>(base?: I): EventSupplierSlashed {
    return EventSupplierSlashed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSupplierSlashed>, I>>(object: I): EventSupplierSlashed {
    const message = createBaseEventSupplierSlashed();
    message.claim = (object.claim !== undefined && object.claim !== null) ? Claim.fromPartial(object.claim) : undefined;
    message.proofMissingPenalty = object.proofMissingPenalty ?? "";
    return message;
  },
};

function createBaseEventClaimDiscarded(): EventClaimDiscarded {
  return { claim: undefined, error: "" };
}

export const EventClaimDiscarded: MessageFns<EventClaimDiscarded> = {
  encode(message: EventClaimDiscarded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.claim !== undefined) {
      Claim.encode(message.claim, writer.uint32(10).fork()).join();
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventClaimDiscarded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventClaimDiscarded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.claim = Claim.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventClaimDiscarded {
    return {
      claim: isSet(object.claim) ? Claim.fromJSON(object.claim) : undefined,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: EventClaimDiscarded): unknown {
    const obj: any = {};
    if (message.claim !== undefined) {
      obj.claim = Claim.toJSON(message.claim);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventClaimDiscarded>, I>>(base?: I): EventClaimDiscarded {
    return EventClaimDiscarded.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventClaimDiscarded>, I>>(object: I): EventClaimDiscarded {
    const message = createBaseEventClaimDiscarded();
    message.claim = (object.claim !== undefined && object.claim !== null) ? Claim.fromPartial(object.claim) : undefined;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseEventApplicationReimbursementRequest(): EventApplicationReimbursementRequest {
  return {
    applicationAddr: "",
    supplierOperatorAddr: "",
    supplierOwnerAddr: "",
    serviceId: "",
    sessionId: "",
    amount: "",
  };
}

export const EventApplicationReimbursementRequest: MessageFns<EventApplicationReimbursementRequest> = {
  encode(message: EventApplicationReimbursementRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.applicationAddr !== "") {
      writer.uint32(10).string(message.applicationAddr);
    }
    if (message.supplierOperatorAddr !== "") {
      writer.uint32(18).string(message.supplierOperatorAddr);
    }
    if (message.supplierOwnerAddr !== "") {
      writer.uint32(26).string(message.supplierOwnerAddr);
    }
    if (message.serviceId !== "") {
      writer.uint32(34).string(message.serviceId);
    }
    if (message.sessionId !== "") {
      writer.uint32(42).string(message.sessionId);
    }
    if (message.amount !== "") {
      writer.uint32(58).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventApplicationReimbursementRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventApplicationReimbursementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.applicationAddr = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.supplierOperatorAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.supplierOwnerAddr = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventApplicationReimbursementRequest {
    return {
      applicationAddr: isSet(object.applicationAddr) ? globalThis.String(object.applicationAddr) : "",
      supplierOperatorAddr: isSet(object.supplierOperatorAddr) ? globalThis.String(object.supplierOperatorAddr) : "",
      supplierOwnerAddr: isSet(object.supplierOwnerAddr) ? globalThis.String(object.supplierOwnerAddr) : "",
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: EventApplicationReimbursementRequest): unknown {
    const obj: any = {};
    if (message.applicationAddr !== "") {
      obj.applicationAddr = message.applicationAddr;
    }
    if (message.supplierOperatorAddr !== "") {
      obj.supplierOperatorAddr = message.supplierOperatorAddr;
    }
    if (message.supplierOwnerAddr !== "") {
      obj.supplierOwnerAddr = message.supplierOwnerAddr;
    }
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventApplicationReimbursementRequest>, I>>(
    base?: I,
  ): EventApplicationReimbursementRequest {
    return EventApplicationReimbursementRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventApplicationReimbursementRequest>, I>>(
    object: I,
  ): EventApplicationReimbursementRequest {
    const message = createBaseEventApplicationReimbursementRequest();
    message.applicationAddr = object.applicationAddr ?? "";
    message.supplierOperatorAddr = object.supplierOperatorAddr ?? "";
    message.supplierOwnerAddr = object.supplierOwnerAddr ?? "";
    message.serviceId = object.serviceId ?? "";
    message.sessionId = object.sessionId ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
