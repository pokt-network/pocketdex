// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pocket/proof/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "pocket.proof";

/** Next index: 13 */
export interface EventClaimCreated {
  numRelays: number;
  numClaimedComputeUnits: number;
  numEstimatedComputeUnits: number;
  claimedUpokt: string;
  /** The Service ID to which the claim corresponds. */
  serviceId: string;
  /** The address of the application which participated in the claimed session. */
  applicationAddress: string;
  /** The end block height of the session to which the claim corresponds. */
  sessionEndBlockHeight: number;
  /**
   * The validation status of the claim.
   * DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
   * enum to minimize onchain disk utilization. This is necessary because event
   * data is not always protobuf-encoded in the various places and formats that it
   * appears in onchain leveldb databases.
   * Enum values:
   *   PENDING_VALIDATION = 0;
   *   VALIDATED = 1;
   *   INVALID = 2;
   */
  claimProofStatusInt: number;
  /** The operator address of the supplier which submitted the claim. */
  supplierOperatorAddress: string;
}

/** TODO_TEST: Add coverage for claim updates. */
export interface EventClaimUpdated {
  numRelays: number;
  numClaimedComputeUnits: number;
  numEstimatedComputeUnits: number;
  claimedUpokt: string;
  /** The Service ID to which the claim corresponds. */
  serviceId: string;
  /** The address of the application which participated in the claimed session. */
  applicationAddress: string;
  /** The end block height of the session to which the claim corresponds. */
  sessionEndBlockHeight: number;
  /**
   * The validation status of the claim.
   * DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
   * enum to minimize onchain disk utilization. This is necessary because event
   * data is not always protobuf-encoded in the various places and formats that it
   * appears in onchain leveldb databases.
   * Enum values:
   *   PENDING_VALIDATION = 0;
   *   VALIDATED = 1;
   *   INVALID = 2;
   */
  claimProofStatusInt: number;
  /** The operator address of the supplier which updated the claim. */
  supplierOperatorAddress: string;
}

/** Next index: 13 */
export interface EventProofSubmitted {
  numRelays: number;
  numClaimedComputeUnits: number;
  numEstimatedComputeUnits: number;
  claimedUpokt: string;
  /** The Service ID to which the claim corresponds. */
  serviceId: string;
  /** The address of the application which participated in the claimed session. */
  applicationAddress: string;
  /** The end block height of the session to which the claim corresponds. */
  sessionEndBlockHeight: number;
  /**
   * The validation status of the claim.
   * DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
   * enum to minimize onchain disk utilization. This is necessary because event
   * data is not always protobuf-encoded in the various places and formats that it
   * appears in onchain leveldb databases.
   * Enum values:
   *   PENDING_VALIDATION = 0;
   *   VALIDATED = 1;
   *   INVALID = 2;
   */
  claimProofStatusInt: number;
  /** The operator address of the supplier which submitted the proof. */
  supplierOperatorAddress: string;
}

/** TODO_TEST: Add coverage for proof updates. */
export interface EventProofUpdated {
  numRelays: number;
  numClaimedComputeUnits: number;
  numEstimatedComputeUnits: number;
  claimedUpokt: string;
  /** The Service ID to which the claim corresponds. */
  serviceId: string;
  /** The address of the application which participated in the claimed session. */
  applicationAddress: string;
  /** The end block height of the session to which the claim corresponds. */
  sessionEndBlockHeight: number;
  /**
   * The validation status of the claim.
   * DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
   * enum to minimize onchain disk utilization. This is necessary because event
   * data is not always protobuf-encoded in the various places and formats that it
   * appears in onchain leveldb databases.
   * Enum values:
   *   PENDING_VALIDATION = 0;
   *   VALIDATED = 1;
   *   INVALID = 2;
   */
  claimProofStatusInt: number;
  /** The operator address of the supplier which updated the proof. */
  supplierOperatorAddress: string;
}

/**
 * Event emitted after a proof has been checked for validity in the proof module's
 * EndBlocker.
 */
export interface EventProofValidityChecked {
  blockHeight: number;
  /**
   * reason is the string representation of the error that led to the proof being
   * marked as invalid (e.g. "invalid closest merkle proof", "invalid relay request signature")
   */
  failureReason: string;
  /** The Service ID to which the claim corresponds. */
  serviceId: string;
  /** The address of the application which participated in the claimed session. */
  applicationAddress: string;
  /** The end block height of the session to which the claim corresponds. */
  sessionEndBlockHeight: number;
  /**
   * The validation status of the claim.
   * DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
   * enum to minimize onchain disk utilization. This is necessary because event
   * data is not always protobuf-encoded in the various places and formats that it
   * appears in onchain leveldb databases.
   * Enum values:
   *   PENDING_VALIDATION = 0;
   *   VALIDATED = 1;
   *   INVALID = 2;
   */
  claimProofStatusInt: number;
  /** The operator address of the supplier whose proof was checked. */
  supplierOperatorAddress: string;
}

function createBaseEventClaimCreated(): EventClaimCreated {
  return {
    numRelays: 0,
    numClaimedComputeUnits: 0,
    numEstimatedComputeUnits: 0,
    claimedUpokt: "",
    serviceId: "",
    applicationAddress: "",
    sessionEndBlockHeight: 0,
    claimProofStatusInt: 0,
    supplierOperatorAddress: "",
  };
}

export const EventClaimCreated: MessageFns<EventClaimCreated> = {
  encode(message: EventClaimCreated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numRelays !== 0) {
      writer.uint32(16).uint64(message.numRelays);
    }
    if (message.numClaimedComputeUnits !== 0) {
      writer.uint32(32).uint64(message.numClaimedComputeUnits);
    }
    if (message.numEstimatedComputeUnits !== 0) {
      writer.uint32(40).uint64(message.numEstimatedComputeUnits);
    }
    if (message.claimedUpokt !== "") {
      writer.uint32(58).string(message.claimedUpokt);
    }
    if (message.serviceId !== "") {
      writer.uint32(66).string(message.serviceId);
    }
    if (message.applicationAddress !== "") {
      writer.uint32(74).string(message.applicationAddress);
    }
    if (message.sessionEndBlockHeight !== 0) {
      writer.uint32(80).int64(message.sessionEndBlockHeight);
    }
    if (message.claimProofStatusInt !== 0) {
      writer.uint32(88).int32(message.claimProofStatusInt);
    }
    if (message.supplierOperatorAddress !== "") {
      writer.uint32(98).string(message.supplierOperatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventClaimCreated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventClaimCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.numRelays = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.numClaimedComputeUnits = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.numEstimatedComputeUnits = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.claimedUpokt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.applicationAddress = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.sessionEndBlockHeight = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.claimProofStatusInt = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.supplierOperatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventClaimCreated {
    return {
      numRelays: isSet(object.numRelays) ? globalThis.Number(object.numRelays) : 0,
      numClaimedComputeUnits: isSet(object.numClaimedComputeUnits)
        ? globalThis.Number(object.numClaimedComputeUnits)
        : 0,
      numEstimatedComputeUnits: isSet(object.numEstimatedComputeUnits)
        ? globalThis.Number(object.numEstimatedComputeUnits)
        : 0,
      claimedUpokt: isSet(object.claimedUpokt) ? globalThis.String(object.claimedUpokt) : "",
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      applicationAddress: isSet(object.applicationAddress) ? globalThis.String(object.applicationAddress) : "",
      sessionEndBlockHeight: isSet(object.sessionEndBlockHeight) ? globalThis.Number(object.sessionEndBlockHeight) : 0,
      claimProofStatusInt: isSet(object.claimProofStatusInt) ? globalThis.Number(object.claimProofStatusInt) : 0,
      supplierOperatorAddress: isSet(object.supplierOperatorAddress)
        ? globalThis.String(object.supplierOperatorAddress)
        : "",
    };
  },

  toJSON(message: EventClaimCreated): unknown {
    const obj: any = {};
    if (message.numRelays !== 0) {
      obj.numRelays = Math.round(message.numRelays);
    }
    if (message.numClaimedComputeUnits !== 0) {
      obj.numClaimedComputeUnits = Math.round(message.numClaimedComputeUnits);
    }
    if (message.numEstimatedComputeUnits !== 0) {
      obj.numEstimatedComputeUnits = Math.round(message.numEstimatedComputeUnits);
    }
    if (message.claimedUpokt !== "") {
      obj.claimedUpokt = message.claimedUpokt;
    }
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.applicationAddress !== "") {
      obj.applicationAddress = message.applicationAddress;
    }
    if (message.sessionEndBlockHeight !== 0) {
      obj.sessionEndBlockHeight = Math.round(message.sessionEndBlockHeight);
    }
    if (message.claimProofStatusInt !== 0) {
      obj.claimProofStatusInt = Math.round(message.claimProofStatusInt);
    }
    if (message.supplierOperatorAddress !== "") {
      obj.supplierOperatorAddress = message.supplierOperatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventClaimCreated>, I>>(base?: I): EventClaimCreated {
    return EventClaimCreated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventClaimCreated>, I>>(object: I): EventClaimCreated {
    const message = createBaseEventClaimCreated();
    message.numRelays = object.numRelays ?? 0;
    message.numClaimedComputeUnits = object.numClaimedComputeUnits ?? 0;
    message.numEstimatedComputeUnits = object.numEstimatedComputeUnits ?? 0;
    message.claimedUpokt = object.claimedUpokt ?? "";
    message.serviceId = object.serviceId ?? "";
    message.applicationAddress = object.applicationAddress ?? "";
    message.sessionEndBlockHeight = object.sessionEndBlockHeight ?? 0;
    message.claimProofStatusInt = object.claimProofStatusInt ?? 0;
    message.supplierOperatorAddress = object.supplierOperatorAddress ?? "";
    return message;
  },
};

function createBaseEventClaimUpdated(): EventClaimUpdated {
  return {
    numRelays: 0,
    numClaimedComputeUnits: 0,
    numEstimatedComputeUnits: 0,
    claimedUpokt: "",
    serviceId: "",
    applicationAddress: "",
    sessionEndBlockHeight: 0,
    claimProofStatusInt: 0,
    supplierOperatorAddress: "",
  };
}

export const EventClaimUpdated: MessageFns<EventClaimUpdated> = {
  encode(message: EventClaimUpdated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numRelays !== 0) {
      writer.uint32(16).uint64(message.numRelays);
    }
    if (message.numClaimedComputeUnits !== 0) {
      writer.uint32(32).uint64(message.numClaimedComputeUnits);
    }
    if (message.numEstimatedComputeUnits !== 0) {
      writer.uint32(40).uint64(message.numEstimatedComputeUnits);
    }
    if (message.claimedUpokt !== "") {
      writer.uint32(58).string(message.claimedUpokt);
    }
    if (message.serviceId !== "") {
      writer.uint32(66).string(message.serviceId);
    }
    if (message.applicationAddress !== "") {
      writer.uint32(74).string(message.applicationAddress);
    }
    if (message.sessionEndBlockHeight !== 0) {
      writer.uint32(80).int64(message.sessionEndBlockHeight);
    }
    if (message.claimProofStatusInt !== 0) {
      writer.uint32(88).int32(message.claimProofStatusInt);
    }
    if (message.supplierOperatorAddress !== "") {
      writer.uint32(98).string(message.supplierOperatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventClaimUpdated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventClaimUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.numRelays = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.numClaimedComputeUnits = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.numEstimatedComputeUnits = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.claimedUpokt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.applicationAddress = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.sessionEndBlockHeight = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.claimProofStatusInt = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.supplierOperatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventClaimUpdated {
    return {
      numRelays: isSet(object.numRelays) ? globalThis.Number(object.numRelays) : 0,
      numClaimedComputeUnits: isSet(object.numClaimedComputeUnits)
        ? globalThis.Number(object.numClaimedComputeUnits)
        : 0,
      numEstimatedComputeUnits: isSet(object.numEstimatedComputeUnits)
        ? globalThis.Number(object.numEstimatedComputeUnits)
        : 0,
      claimedUpokt: isSet(object.claimedUpokt) ? globalThis.String(object.claimedUpokt) : "",
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      applicationAddress: isSet(object.applicationAddress) ? globalThis.String(object.applicationAddress) : "",
      sessionEndBlockHeight: isSet(object.sessionEndBlockHeight) ? globalThis.Number(object.sessionEndBlockHeight) : 0,
      claimProofStatusInt: isSet(object.claimProofStatusInt) ? globalThis.Number(object.claimProofStatusInt) : 0,
      supplierOperatorAddress: isSet(object.supplierOperatorAddress)
        ? globalThis.String(object.supplierOperatorAddress)
        : "",
    };
  },

  toJSON(message: EventClaimUpdated): unknown {
    const obj: any = {};
    if (message.numRelays !== 0) {
      obj.numRelays = Math.round(message.numRelays);
    }
    if (message.numClaimedComputeUnits !== 0) {
      obj.numClaimedComputeUnits = Math.round(message.numClaimedComputeUnits);
    }
    if (message.numEstimatedComputeUnits !== 0) {
      obj.numEstimatedComputeUnits = Math.round(message.numEstimatedComputeUnits);
    }
    if (message.claimedUpokt !== "") {
      obj.claimedUpokt = message.claimedUpokt;
    }
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.applicationAddress !== "") {
      obj.applicationAddress = message.applicationAddress;
    }
    if (message.sessionEndBlockHeight !== 0) {
      obj.sessionEndBlockHeight = Math.round(message.sessionEndBlockHeight);
    }
    if (message.claimProofStatusInt !== 0) {
      obj.claimProofStatusInt = Math.round(message.claimProofStatusInt);
    }
    if (message.supplierOperatorAddress !== "") {
      obj.supplierOperatorAddress = message.supplierOperatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventClaimUpdated>, I>>(base?: I): EventClaimUpdated {
    return EventClaimUpdated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventClaimUpdated>, I>>(object: I): EventClaimUpdated {
    const message = createBaseEventClaimUpdated();
    message.numRelays = object.numRelays ?? 0;
    message.numClaimedComputeUnits = object.numClaimedComputeUnits ?? 0;
    message.numEstimatedComputeUnits = object.numEstimatedComputeUnits ?? 0;
    message.claimedUpokt = object.claimedUpokt ?? "";
    message.serviceId = object.serviceId ?? "";
    message.applicationAddress = object.applicationAddress ?? "";
    message.sessionEndBlockHeight = object.sessionEndBlockHeight ?? 0;
    message.claimProofStatusInt = object.claimProofStatusInt ?? 0;
    message.supplierOperatorAddress = object.supplierOperatorAddress ?? "";
    return message;
  },
};

function createBaseEventProofSubmitted(): EventProofSubmitted {
  return {
    numRelays: 0,
    numClaimedComputeUnits: 0,
    numEstimatedComputeUnits: 0,
    claimedUpokt: "",
    serviceId: "",
    applicationAddress: "",
    sessionEndBlockHeight: 0,
    claimProofStatusInt: 0,
    supplierOperatorAddress: "",
  };
}

export const EventProofSubmitted: MessageFns<EventProofSubmitted> = {
  encode(message: EventProofSubmitted, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numRelays !== 0) {
      writer.uint32(24).uint64(message.numRelays);
    }
    if (message.numClaimedComputeUnits !== 0) {
      writer.uint32(32).uint64(message.numClaimedComputeUnits);
    }
    if (message.numEstimatedComputeUnits !== 0) {
      writer.uint32(40).uint64(message.numEstimatedComputeUnits);
    }
    if (message.claimedUpokt !== "") {
      writer.uint32(58).string(message.claimedUpokt);
    }
    if (message.serviceId !== "") {
      writer.uint32(66).string(message.serviceId);
    }
    if (message.applicationAddress !== "") {
      writer.uint32(74).string(message.applicationAddress);
    }
    if (message.sessionEndBlockHeight !== 0) {
      writer.uint32(80).int64(message.sessionEndBlockHeight);
    }
    if (message.claimProofStatusInt !== 0) {
      writer.uint32(88).int32(message.claimProofStatusInt);
    }
    if (message.supplierOperatorAddress !== "") {
      writer.uint32(98).string(message.supplierOperatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventProofSubmitted {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventProofSubmitted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.numRelays = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.numClaimedComputeUnits = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.numEstimatedComputeUnits = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.claimedUpokt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.applicationAddress = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.sessionEndBlockHeight = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.claimProofStatusInt = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.supplierOperatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventProofSubmitted {
    return {
      numRelays: isSet(object.numRelays) ? globalThis.Number(object.numRelays) : 0,
      numClaimedComputeUnits: isSet(object.numClaimedComputeUnits)
        ? globalThis.Number(object.numClaimedComputeUnits)
        : 0,
      numEstimatedComputeUnits: isSet(object.numEstimatedComputeUnits)
        ? globalThis.Number(object.numEstimatedComputeUnits)
        : 0,
      claimedUpokt: isSet(object.claimedUpokt) ? globalThis.String(object.claimedUpokt) : "",
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      applicationAddress: isSet(object.applicationAddress) ? globalThis.String(object.applicationAddress) : "",
      sessionEndBlockHeight: isSet(object.sessionEndBlockHeight) ? globalThis.Number(object.sessionEndBlockHeight) : 0,
      claimProofStatusInt: isSet(object.claimProofStatusInt) ? globalThis.Number(object.claimProofStatusInt) : 0,
      supplierOperatorAddress: isSet(object.supplierOperatorAddress)
        ? globalThis.String(object.supplierOperatorAddress)
        : "",
    };
  },

  toJSON(message: EventProofSubmitted): unknown {
    const obj: any = {};
    if (message.numRelays !== 0) {
      obj.numRelays = Math.round(message.numRelays);
    }
    if (message.numClaimedComputeUnits !== 0) {
      obj.numClaimedComputeUnits = Math.round(message.numClaimedComputeUnits);
    }
    if (message.numEstimatedComputeUnits !== 0) {
      obj.numEstimatedComputeUnits = Math.round(message.numEstimatedComputeUnits);
    }
    if (message.claimedUpokt !== "") {
      obj.claimedUpokt = message.claimedUpokt;
    }
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.applicationAddress !== "") {
      obj.applicationAddress = message.applicationAddress;
    }
    if (message.sessionEndBlockHeight !== 0) {
      obj.sessionEndBlockHeight = Math.round(message.sessionEndBlockHeight);
    }
    if (message.claimProofStatusInt !== 0) {
      obj.claimProofStatusInt = Math.round(message.claimProofStatusInt);
    }
    if (message.supplierOperatorAddress !== "") {
      obj.supplierOperatorAddress = message.supplierOperatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventProofSubmitted>, I>>(base?: I): EventProofSubmitted {
    return EventProofSubmitted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventProofSubmitted>, I>>(object: I): EventProofSubmitted {
    const message = createBaseEventProofSubmitted();
    message.numRelays = object.numRelays ?? 0;
    message.numClaimedComputeUnits = object.numClaimedComputeUnits ?? 0;
    message.numEstimatedComputeUnits = object.numEstimatedComputeUnits ?? 0;
    message.claimedUpokt = object.claimedUpokt ?? "";
    message.serviceId = object.serviceId ?? "";
    message.applicationAddress = object.applicationAddress ?? "";
    message.sessionEndBlockHeight = object.sessionEndBlockHeight ?? 0;
    message.claimProofStatusInt = object.claimProofStatusInt ?? 0;
    message.supplierOperatorAddress = object.supplierOperatorAddress ?? "";
    return message;
  },
};

function createBaseEventProofUpdated(): EventProofUpdated {
  return {
    numRelays: 0,
    numClaimedComputeUnits: 0,
    numEstimatedComputeUnits: 0,
    claimedUpokt: "",
    serviceId: "",
    applicationAddress: "",
    sessionEndBlockHeight: 0,
    claimProofStatusInt: 0,
    supplierOperatorAddress: "",
  };
}

export const EventProofUpdated: MessageFns<EventProofUpdated> = {
  encode(message: EventProofUpdated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numRelays !== 0) {
      writer.uint32(24).uint64(message.numRelays);
    }
    if (message.numClaimedComputeUnits !== 0) {
      writer.uint32(32).uint64(message.numClaimedComputeUnits);
    }
    if (message.numEstimatedComputeUnits !== 0) {
      writer.uint32(40).uint64(message.numEstimatedComputeUnits);
    }
    if (message.claimedUpokt !== "") {
      writer.uint32(58).string(message.claimedUpokt);
    }
    if (message.serviceId !== "") {
      writer.uint32(66).string(message.serviceId);
    }
    if (message.applicationAddress !== "") {
      writer.uint32(74).string(message.applicationAddress);
    }
    if (message.sessionEndBlockHeight !== 0) {
      writer.uint32(80).int64(message.sessionEndBlockHeight);
    }
    if (message.claimProofStatusInt !== 0) {
      writer.uint32(88).int32(message.claimProofStatusInt);
    }
    if (message.supplierOperatorAddress !== "") {
      writer.uint32(98).string(message.supplierOperatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventProofUpdated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventProofUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.numRelays = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.numClaimedComputeUnits = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.numEstimatedComputeUnits = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.claimedUpokt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.applicationAddress = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.sessionEndBlockHeight = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.claimProofStatusInt = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.supplierOperatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventProofUpdated {
    return {
      numRelays: isSet(object.numRelays) ? globalThis.Number(object.numRelays) : 0,
      numClaimedComputeUnits: isSet(object.numClaimedComputeUnits)
        ? globalThis.Number(object.numClaimedComputeUnits)
        : 0,
      numEstimatedComputeUnits: isSet(object.numEstimatedComputeUnits)
        ? globalThis.Number(object.numEstimatedComputeUnits)
        : 0,
      claimedUpokt: isSet(object.claimedUpokt) ? globalThis.String(object.claimedUpokt) : "",
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      applicationAddress: isSet(object.applicationAddress) ? globalThis.String(object.applicationAddress) : "",
      sessionEndBlockHeight: isSet(object.sessionEndBlockHeight) ? globalThis.Number(object.sessionEndBlockHeight) : 0,
      claimProofStatusInt: isSet(object.claimProofStatusInt) ? globalThis.Number(object.claimProofStatusInt) : 0,
      supplierOperatorAddress: isSet(object.supplierOperatorAddress)
        ? globalThis.String(object.supplierOperatorAddress)
        : "",
    };
  },

  toJSON(message: EventProofUpdated): unknown {
    const obj: any = {};
    if (message.numRelays !== 0) {
      obj.numRelays = Math.round(message.numRelays);
    }
    if (message.numClaimedComputeUnits !== 0) {
      obj.numClaimedComputeUnits = Math.round(message.numClaimedComputeUnits);
    }
    if (message.numEstimatedComputeUnits !== 0) {
      obj.numEstimatedComputeUnits = Math.round(message.numEstimatedComputeUnits);
    }
    if (message.claimedUpokt !== "") {
      obj.claimedUpokt = message.claimedUpokt;
    }
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.applicationAddress !== "") {
      obj.applicationAddress = message.applicationAddress;
    }
    if (message.sessionEndBlockHeight !== 0) {
      obj.sessionEndBlockHeight = Math.round(message.sessionEndBlockHeight);
    }
    if (message.claimProofStatusInt !== 0) {
      obj.claimProofStatusInt = Math.round(message.claimProofStatusInt);
    }
    if (message.supplierOperatorAddress !== "") {
      obj.supplierOperatorAddress = message.supplierOperatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventProofUpdated>, I>>(base?: I): EventProofUpdated {
    return EventProofUpdated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventProofUpdated>, I>>(object: I): EventProofUpdated {
    const message = createBaseEventProofUpdated();
    message.numRelays = object.numRelays ?? 0;
    message.numClaimedComputeUnits = object.numClaimedComputeUnits ?? 0;
    message.numEstimatedComputeUnits = object.numEstimatedComputeUnits ?? 0;
    message.claimedUpokt = object.claimedUpokt ?? "";
    message.serviceId = object.serviceId ?? "";
    message.applicationAddress = object.applicationAddress ?? "";
    message.sessionEndBlockHeight = object.sessionEndBlockHeight ?? 0;
    message.claimProofStatusInt = object.claimProofStatusInt ?? 0;
    message.supplierOperatorAddress = object.supplierOperatorAddress ?? "";
    return message;
  },
};

function createBaseEventProofValidityChecked(): EventProofValidityChecked {
  return {
    blockHeight: 0,
    failureReason: "",
    serviceId: "",
    applicationAddress: "",
    sessionEndBlockHeight: 0,
    claimProofStatusInt: 0,
    supplierOperatorAddress: "",
  };
}

export const EventProofValidityChecked: MessageFns<EventProofValidityChecked> = {
  encode(message: EventProofValidityChecked, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeight !== 0) {
      writer.uint32(16).uint64(message.blockHeight);
    }
    if (message.failureReason !== "") {
      writer.uint32(34).string(message.failureReason);
    }
    if (message.serviceId !== "") {
      writer.uint32(66).string(message.serviceId);
    }
    if (message.applicationAddress !== "") {
      writer.uint32(74).string(message.applicationAddress);
    }
    if (message.sessionEndBlockHeight !== 0) {
      writer.uint32(80).int64(message.sessionEndBlockHeight);
    }
    if (message.claimProofStatusInt !== 0) {
      writer.uint32(88).int32(message.claimProofStatusInt);
    }
    if (message.supplierOperatorAddress !== "") {
      writer.uint32(98).string(message.supplierOperatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventProofValidityChecked {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventProofValidityChecked();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.failureReason = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.applicationAddress = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.sessionEndBlockHeight = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.claimProofStatusInt = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.supplierOperatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventProofValidityChecked {
    return {
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      failureReason: isSet(object.failureReason) ? globalThis.String(object.failureReason) : "",
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      applicationAddress: isSet(object.applicationAddress) ? globalThis.String(object.applicationAddress) : "",
      sessionEndBlockHeight: isSet(object.sessionEndBlockHeight) ? globalThis.Number(object.sessionEndBlockHeight) : 0,
      claimProofStatusInt: isSet(object.claimProofStatusInt) ? globalThis.Number(object.claimProofStatusInt) : 0,
      supplierOperatorAddress: isSet(object.supplierOperatorAddress)
        ? globalThis.String(object.supplierOperatorAddress)
        : "",
    };
  },

  toJSON(message: EventProofValidityChecked): unknown {
    const obj: any = {};
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.failureReason !== "") {
      obj.failureReason = message.failureReason;
    }
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.applicationAddress !== "") {
      obj.applicationAddress = message.applicationAddress;
    }
    if (message.sessionEndBlockHeight !== 0) {
      obj.sessionEndBlockHeight = Math.round(message.sessionEndBlockHeight);
    }
    if (message.claimProofStatusInt !== 0) {
      obj.claimProofStatusInt = Math.round(message.claimProofStatusInt);
    }
    if (message.supplierOperatorAddress !== "") {
      obj.supplierOperatorAddress = message.supplierOperatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventProofValidityChecked>, I>>(base?: I): EventProofValidityChecked {
    return EventProofValidityChecked.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventProofValidityChecked>, I>>(object: I): EventProofValidityChecked {
    const message = createBaseEventProofValidityChecked();
    message.blockHeight = object.blockHeight ?? 0;
    message.failureReason = object.failureReason ?? "";
    message.serviceId = object.serviceId ?? "";
    message.applicationAddress = object.applicationAddress ?? "";
    message.sessionEndBlockHeight = object.sessionEndBlockHeight ?? 0;
    message.claimProofStatusInt = object.claimProofStatusInt ?? 0;
    message.supplierOperatorAddress = object.supplierOperatorAddress ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
