// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: cosmos/epochs/v1beta1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "cosmos.epochs.v1beta1";

/** EventEpochEnd is an event emitted when an epoch end. */
export interface EventEpochEnd {
  epochNumber: number;
}

/** EventEpochStart is an event emitted when an epoch start. */
export interface EventEpochStart {
  epochNumber: number;
  epochStartTime: number;
}

function createBaseEventEpochEnd(): EventEpochEnd {
  return { epochNumber: 0 };
}

export const EventEpochEnd: MessageFns<EventEpochEnd> = {
  encode(message: EventEpochEnd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.epochNumber !== 0) {
      writer.uint32(8).int64(message.epochNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventEpochEnd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventEpochEnd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.epochNumber = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventEpochEnd {
    return { epochNumber: isSet(object.epochNumber) ? globalThis.Number(object.epochNumber) : 0 };
  },

  toJSON(message: EventEpochEnd): unknown {
    const obj: any = {};
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventEpochEnd>, I>>(base?: I): EventEpochEnd {
    return EventEpochEnd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventEpochEnd>, I>>(object: I): EventEpochEnd {
    const message = createBaseEventEpochEnd();
    message.epochNumber = object.epochNumber ?? 0;
    return message;
  },
};

function createBaseEventEpochStart(): EventEpochStart {
  return { epochNumber: 0, epochStartTime: 0 };
}

export const EventEpochStart: MessageFns<EventEpochStart> = {
  encode(message: EventEpochStart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.epochNumber !== 0) {
      writer.uint32(8).int64(message.epochNumber);
    }
    if (message.epochStartTime !== 0) {
      writer.uint32(16).int64(message.epochStartTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventEpochStart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventEpochStart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.epochNumber = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.epochStartTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventEpochStart {
    return {
      epochNumber: isSet(object.epochNumber) ? globalThis.Number(object.epochNumber) : 0,
      epochStartTime: isSet(object.epochStartTime) ? globalThis.Number(object.epochStartTime) : 0,
    };
  },

  toJSON(message: EventEpochStart): unknown {
    const obj: any = {};
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    if (message.epochStartTime !== 0) {
      obj.epochStartTime = Math.round(message.epochStartTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventEpochStart>, I>>(base?: I): EventEpochStart {
    return EventEpochStart.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventEpochStart>, I>>(object: I): EventEpochStart {
    const message = createBaseEventEpochStart();
    message.epochNumber = object.epochNumber ?? 0;
    message.epochStartTime = object.epochStartTime ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
