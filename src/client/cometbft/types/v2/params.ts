// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: cometbft/types/v2/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration";
import { Int64Value } from "../../../google/protobuf/wrappers";

export const protobufPackage = "cometbft.types.v2";

/**
 * ConsensusParams contains consensus critical parameters that determine the
 * validity of blocks.
 */
export interface ConsensusParams {
  block: BlockParams | undefined;
  evidence: EvidenceParams | undefined;
  validator: ValidatorParams | undefined;
  version:
    | VersionParams
    | undefined;
  /**
   * Use FeatureParams.vote_extensions_enable_height instead
   *
   * @deprecated
   */
  abci: ABCIParams | undefined;
  synchrony: SynchronyParams | undefined;
  feature: FeatureParams | undefined;
}

/** BlockParams define limits on the block size and gas. */
export interface BlockParams {
  /**
   * Maximum size of a block, in bytes.
   *
   * Must be greater or equal to -1 and cannot be greater than the hard-coded
   * maximum block size, which is 100MB.
   *
   * If set to -1, the limit is the hard-coded maximum block size.
   */
  maxBytes: number;
  /**
   * Maximum gas wanted by transactions included in a block.
   *
   * Must be greater or equal to -1. If set to -1, no limit is enforced.
   */
  maxGas: number;
}

/** EvidenceParams determine the validity of evidences of Byzantine behavior. */
export interface EvidenceParams {
  /**
   * Maximum age of evidence, in blocks.
   *
   * The recommended formula for calculating it is max_age_duration / {average
   * block time}.
   */
  maxAgeNumBlocks: number;
  /**
   * Maximum age of evidence, in time.
   *
   * The recommended value of is should correspond to the application's
   * "unbonding period" or other similar mechanism for handling
   * Nothing-At-Stake attacks.
   * See:
   * https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed.
   */
  maxAgeDuration:
    | Duration
    | undefined;
  /**
   * Maximum size in bytes of evidence allowed to be included in a block.
   *
   * It should fall comfortably under the maximum size of a block.
   */
  maxBytes: number;
}

/**
 * ValidatorParams restrict the public key types validators can use.
 *
 * NOTE: uses ABCI public keys naming, not Amino names.
 */
export interface ValidatorParams {
  pubKeyTypes: string[];
}

/** VersionParams contain the version of specific components of CometBFT. */
export interface VersionParams {
  /**
   * The ABCI application version.
   *
   * It was named app_version in CometBFT 0.34.
   */
  app: number;
}

/**
 * HashedParams is a subset of ConsensusParams.
 *
 * It is hashed into the Header.ConsensusHash.
 */
export interface HashedParams {
  blockMaxBytes: number;
  blockMaxGas: number;
}

/**
 * SynchronyParams determine the validity of block timestamps.
 *
 * These parameters are part of the Proposer-Based Timestamps (PBTS) algorithm.
 * For more information on the relationship of the synchrony parameters to
 * block timestamps validity, refer to the PBTS specification:
 * https://github.com/tendermint/spec/blob/master/spec/consensus/proposer-based-timestamp/README.md
 */
export interface SynchronyParams {
  /**
   * Bound for how skewed a proposer's clock may be from any validator on the
   * network while still producing valid proposals.
   */
  precision:
    | Duration
    | undefined;
  /**
   * Bound for how long a proposal message may take to reach all validators on
   * a network and still be considered valid.
   */
  messageDelay: Duration | undefined;
}

/** FeatureParams configure the height from which features of CometBFT are enabled. */
export interface FeatureParams {
  /**
   * Height during which vote extensions will be enabled.
   *
   * A value of 0 means vote extensions are disabled. A value > 0 denotes
   * the height at which vote extensions will be (or have been) enabled.
   *
   * During the specified height, and for all subsequent heights, precommit
   * messages that do not contain valid extension data will be considered
   * invalid. Prior to this height, or when this height is set to 0, vote
   * extensions will not be used or accepted by validators on the network.
   *
   * Once enabled, vote extensions will be created by the application in
   * ExtendVote, validated by the application in VerifyVoteExtension, and
   * used by the application in PrepareProposal, when proposing the next block.
   *
   * Cannot be set to heights lower or equal to the current blockchain height.
   */
  voteExtensionsEnableHeight:
    | number
    | undefined;
  /**
   * Height at which Proposer-Based Timestamps (PBTS) will be enabled.
   *
   * A value of 0 means PBTS is disabled. A value > 0 denotes the height at
   * which PBTS will be (or has been) enabled.
   *
   * From the specified height, and for all subsequent heights, the PBTS
   * algorithm will be used to produce and validate block timestamps. Prior to
   * this height, or when this height is set to 0, the legacy BFT Time
   * algorithm is used to produce and validate timestamps.
   *
   * Cannot be set to heights lower or equal to the current blockchain height.
   */
  pbtsEnableHeight: number | undefined;
}

/**
 * ABCIParams is deprecated and its contents moved to FeatureParams
 *
 * @deprecated
 */
export interface ABCIParams {
  /**
   * vote_extensions_enable_height has been deprecated.
   * Instead, use FeatureParams.vote_extensions_enable_height.
   */
  voteExtensionsEnableHeight: number;
}

function createBaseConsensusParams(): ConsensusParams {
  return {
    block: undefined,
    evidence: undefined,
    validator: undefined,
    version: undefined,
    abci: undefined,
    synchrony: undefined,
    feature: undefined,
  };
}

export const ConsensusParams: MessageFns<ConsensusParams> = {
  encode(message: ConsensusParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.block !== undefined) {
      BlockParams.encode(message.block, writer.uint32(10).fork()).join();
    }
    if (message.evidence !== undefined) {
      EvidenceParams.encode(message.evidence, writer.uint32(18).fork()).join();
    }
    if (message.validator !== undefined) {
      ValidatorParams.encode(message.validator, writer.uint32(26).fork()).join();
    }
    if (message.version !== undefined) {
      VersionParams.encode(message.version, writer.uint32(34).fork()).join();
    }
    if (message.abci !== undefined) {
      ABCIParams.encode(message.abci, writer.uint32(42).fork()).join();
    }
    if (message.synchrony !== undefined) {
      SynchronyParams.encode(message.synchrony, writer.uint32(50).fork()).join();
    }
    if (message.feature !== undefined) {
      FeatureParams.encode(message.feature, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsensusParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsensusParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.block = BlockParams.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.evidence = EvidenceParams.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.validator = ValidatorParams.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.version = VersionParams.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.abci = ABCIParams.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.synchrony = SynchronyParams.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.feature = FeatureParams.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsensusParams {
    return {
      block: isSet(object.block) ? BlockParams.fromJSON(object.block) : undefined,
      evidence: isSet(object.evidence) ? EvidenceParams.fromJSON(object.evidence) : undefined,
      validator: isSet(object.validator) ? ValidatorParams.fromJSON(object.validator) : undefined,
      version: isSet(object.version) ? VersionParams.fromJSON(object.version) : undefined,
      abci: isSet(object.abci) ? ABCIParams.fromJSON(object.abci) : undefined,
      synchrony: isSet(object.synchrony) ? SynchronyParams.fromJSON(object.synchrony) : undefined,
      feature: isSet(object.feature) ? FeatureParams.fromJSON(object.feature) : undefined,
    };
  },

  toJSON(message: ConsensusParams): unknown {
    const obj: any = {};
    if (message.block !== undefined) {
      obj.block = BlockParams.toJSON(message.block);
    }
    if (message.evidence !== undefined) {
      obj.evidence = EvidenceParams.toJSON(message.evidence);
    }
    if (message.validator !== undefined) {
      obj.validator = ValidatorParams.toJSON(message.validator);
    }
    if (message.version !== undefined) {
      obj.version = VersionParams.toJSON(message.version);
    }
    if (message.abci !== undefined) {
      obj.abci = ABCIParams.toJSON(message.abci);
    }
    if (message.synchrony !== undefined) {
      obj.synchrony = SynchronyParams.toJSON(message.synchrony);
    }
    if (message.feature !== undefined) {
      obj.feature = FeatureParams.toJSON(message.feature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsensusParams>, I>>(base?: I): ConsensusParams {
    return ConsensusParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsensusParams>, I>>(object: I): ConsensusParams {
    const message = createBaseConsensusParams();
    message.block = (object.block !== undefined && object.block !== null)
      ? BlockParams.fromPartial(object.block)
      : undefined;
    message.evidence = (object.evidence !== undefined && object.evidence !== null)
      ? EvidenceParams.fromPartial(object.evidence)
      : undefined;
    message.validator = (object.validator !== undefined && object.validator !== null)
      ? ValidatorParams.fromPartial(object.validator)
      : undefined;
    message.version = (object.version !== undefined && object.version !== null)
      ? VersionParams.fromPartial(object.version)
      : undefined;
    message.abci = (object.abci !== undefined && object.abci !== null)
      ? ABCIParams.fromPartial(object.abci)
      : undefined;
    message.synchrony = (object.synchrony !== undefined && object.synchrony !== null)
      ? SynchronyParams.fromPartial(object.synchrony)
      : undefined;
    message.feature = (object.feature !== undefined && object.feature !== null)
      ? FeatureParams.fromPartial(object.feature)
      : undefined;
    return message;
  },
};

function createBaseBlockParams(): BlockParams {
  return { maxBytes: 0, maxGas: 0 };
}

export const BlockParams: MessageFns<BlockParams> = {
  encode(message: BlockParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxBytes !== 0) {
      writer.uint32(8).int64(message.maxBytes);
    }
    if (message.maxGas !== 0) {
      writer.uint32(16).int64(message.maxGas);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.maxBytes = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxGas = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockParams {
    return {
      maxBytes: isSet(object.maxBytes) ? globalThis.Number(object.maxBytes) : 0,
      maxGas: isSet(object.maxGas) ? globalThis.Number(object.maxGas) : 0,
    };
  },

  toJSON(message: BlockParams): unknown {
    const obj: any = {};
    if (message.maxBytes !== 0) {
      obj.maxBytes = Math.round(message.maxBytes);
    }
    if (message.maxGas !== 0) {
      obj.maxGas = Math.round(message.maxGas);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockParams>, I>>(base?: I): BlockParams {
    return BlockParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockParams>, I>>(object: I): BlockParams {
    const message = createBaseBlockParams();
    message.maxBytes = object.maxBytes ?? 0;
    message.maxGas = object.maxGas ?? 0;
    return message;
  },
};

function createBaseEvidenceParams(): EvidenceParams {
  return { maxAgeNumBlocks: 0, maxAgeDuration: undefined, maxBytes: 0 };
}

export const EvidenceParams: MessageFns<EvidenceParams> = {
  encode(message: EvidenceParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxAgeNumBlocks !== 0) {
      writer.uint32(8).int64(message.maxAgeNumBlocks);
    }
    if (message.maxAgeDuration !== undefined) {
      Duration.encode(message.maxAgeDuration, writer.uint32(18).fork()).join();
    }
    if (message.maxBytes !== 0) {
      writer.uint32(24).int64(message.maxBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvidenceParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvidenceParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.maxAgeNumBlocks = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.maxAgeDuration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxBytes = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvidenceParams {
    return {
      maxAgeNumBlocks: isSet(object.maxAgeNumBlocks) ? globalThis.Number(object.maxAgeNumBlocks) : 0,
      maxAgeDuration: isSet(object.maxAgeDuration) ? Duration.fromJSON(object.maxAgeDuration) : undefined,
      maxBytes: isSet(object.maxBytes) ? globalThis.Number(object.maxBytes) : 0,
    };
  },

  toJSON(message: EvidenceParams): unknown {
    const obj: any = {};
    if (message.maxAgeNumBlocks !== 0) {
      obj.maxAgeNumBlocks = Math.round(message.maxAgeNumBlocks);
    }
    if (message.maxAgeDuration !== undefined) {
      obj.maxAgeDuration = Duration.toJSON(message.maxAgeDuration);
    }
    if (message.maxBytes !== 0) {
      obj.maxBytes = Math.round(message.maxBytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvidenceParams>, I>>(base?: I): EvidenceParams {
    return EvidenceParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvidenceParams>, I>>(object: I): EvidenceParams {
    const message = createBaseEvidenceParams();
    message.maxAgeNumBlocks = object.maxAgeNumBlocks ?? 0;
    message.maxAgeDuration = (object.maxAgeDuration !== undefined && object.maxAgeDuration !== null)
      ? Duration.fromPartial(object.maxAgeDuration)
      : undefined;
    message.maxBytes = object.maxBytes ?? 0;
    return message;
  },
};

function createBaseValidatorParams(): ValidatorParams {
  return { pubKeyTypes: [] };
}

export const ValidatorParams: MessageFns<ValidatorParams> = {
  encode(message: ValidatorParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.pubKeyTypes) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidatorParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pubKeyTypes.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorParams {
    return {
      pubKeyTypes: globalThis.Array.isArray(object?.pubKeyTypes)
        ? object.pubKeyTypes.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ValidatorParams): unknown {
    const obj: any = {};
    if (message.pubKeyTypes?.length) {
      obj.pubKeyTypes = message.pubKeyTypes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidatorParams>, I>>(base?: I): ValidatorParams {
    return ValidatorParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidatorParams>, I>>(object: I): ValidatorParams {
    const message = createBaseValidatorParams();
    message.pubKeyTypes = object.pubKeyTypes?.map((e) => e) || [];
    return message;
  },
};

function createBaseVersionParams(): VersionParams {
  return { app: 0 };
}

export const VersionParams: MessageFns<VersionParams> = {
  encode(message: VersionParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.app !== 0) {
      writer.uint32(8).uint64(message.app);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VersionParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersionParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.app = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VersionParams {
    return { app: isSet(object.app) ? globalThis.Number(object.app) : 0 };
  },

  toJSON(message: VersionParams): unknown {
    const obj: any = {};
    if (message.app !== 0) {
      obj.app = Math.round(message.app);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VersionParams>, I>>(base?: I): VersionParams {
    return VersionParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VersionParams>, I>>(object: I): VersionParams {
    const message = createBaseVersionParams();
    message.app = object.app ?? 0;
    return message;
  },
};

function createBaseHashedParams(): HashedParams {
  return { blockMaxBytes: 0, blockMaxGas: 0 };
}

export const HashedParams: MessageFns<HashedParams> = {
  encode(message: HashedParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockMaxBytes !== 0) {
      writer.uint32(8).int64(message.blockMaxBytes);
    }
    if (message.blockMaxGas !== 0) {
      writer.uint32(16).int64(message.blockMaxGas);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HashedParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHashedParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockMaxBytes = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockMaxGas = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HashedParams {
    return {
      blockMaxBytes: isSet(object.blockMaxBytes) ? globalThis.Number(object.blockMaxBytes) : 0,
      blockMaxGas: isSet(object.blockMaxGas) ? globalThis.Number(object.blockMaxGas) : 0,
    };
  },

  toJSON(message: HashedParams): unknown {
    const obj: any = {};
    if (message.blockMaxBytes !== 0) {
      obj.blockMaxBytes = Math.round(message.blockMaxBytes);
    }
    if (message.blockMaxGas !== 0) {
      obj.blockMaxGas = Math.round(message.blockMaxGas);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HashedParams>, I>>(base?: I): HashedParams {
    return HashedParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HashedParams>, I>>(object: I): HashedParams {
    const message = createBaseHashedParams();
    message.blockMaxBytes = object.blockMaxBytes ?? 0;
    message.blockMaxGas = object.blockMaxGas ?? 0;
    return message;
  },
};

function createBaseSynchronyParams(): SynchronyParams {
  return { precision: undefined, messageDelay: undefined };
}

export const SynchronyParams: MessageFns<SynchronyParams> = {
  encode(message: SynchronyParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.precision !== undefined) {
      Duration.encode(message.precision, writer.uint32(10).fork()).join();
    }
    if (message.messageDelay !== undefined) {
      Duration.encode(message.messageDelay, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynchronyParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynchronyParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.precision = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messageDelay = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynchronyParams {
    return {
      precision: isSet(object.precision) ? Duration.fromJSON(object.precision) : undefined,
      messageDelay: isSet(object.messageDelay) ? Duration.fromJSON(object.messageDelay) : undefined,
    };
  },

  toJSON(message: SynchronyParams): unknown {
    const obj: any = {};
    if (message.precision !== undefined) {
      obj.precision = Duration.toJSON(message.precision);
    }
    if (message.messageDelay !== undefined) {
      obj.messageDelay = Duration.toJSON(message.messageDelay);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SynchronyParams>, I>>(base?: I): SynchronyParams {
    return SynchronyParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SynchronyParams>, I>>(object: I): SynchronyParams {
    const message = createBaseSynchronyParams();
    message.precision = (object.precision !== undefined && object.precision !== null)
      ? Duration.fromPartial(object.precision)
      : undefined;
    message.messageDelay = (object.messageDelay !== undefined && object.messageDelay !== null)
      ? Duration.fromPartial(object.messageDelay)
      : undefined;
    return message;
  },
};

function createBaseFeatureParams(): FeatureParams {
  return { voteExtensionsEnableHeight: undefined, pbtsEnableHeight: undefined };
}

export const FeatureParams: MessageFns<FeatureParams> = {
  encode(message: FeatureParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.voteExtensionsEnableHeight !== undefined) {
      Int64Value.encode({ value: message.voteExtensionsEnableHeight! }, writer.uint32(10).fork()).join();
    }
    if (message.pbtsEnableHeight !== undefined) {
      Int64Value.encode({ value: message.pbtsEnableHeight! }, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.voteExtensionsEnableHeight = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pbtsEnableHeight = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureParams {
    return {
      voteExtensionsEnableHeight: isSet(object.voteExtensionsEnableHeight)
        ? Number(object.voteExtensionsEnableHeight)
        : undefined,
      pbtsEnableHeight: isSet(object.pbtsEnableHeight) ? Number(object.pbtsEnableHeight) : undefined,
    };
  },

  toJSON(message: FeatureParams): unknown {
    const obj: any = {};
    if (message.voteExtensionsEnableHeight !== undefined) {
      obj.voteExtensionsEnableHeight = message.voteExtensionsEnableHeight;
    }
    if (message.pbtsEnableHeight !== undefined) {
      obj.pbtsEnableHeight = message.pbtsEnableHeight;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FeatureParams>, I>>(base?: I): FeatureParams {
    return FeatureParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FeatureParams>, I>>(object: I): FeatureParams {
    const message = createBaseFeatureParams();
    message.voteExtensionsEnableHeight = object.voteExtensionsEnableHeight ?? undefined;
    message.pbtsEnableHeight = object.pbtsEnableHeight ?? undefined;
    return message;
  },
};

function createBaseABCIParams(): ABCIParams {
  return { voteExtensionsEnableHeight: 0 };
}

export const ABCIParams: MessageFns<ABCIParams> = {
  encode(message: ABCIParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.voteExtensionsEnableHeight !== 0) {
      writer.uint32(8).int64(message.voteExtensionsEnableHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABCIParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABCIParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.voteExtensionsEnableHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABCIParams {
    return {
      voteExtensionsEnableHeight: isSet(object.voteExtensionsEnableHeight)
        ? globalThis.Number(object.voteExtensionsEnableHeight)
        : 0,
    };
  },

  toJSON(message: ABCIParams): unknown {
    const obj: any = {};
    if (message.voteExtensionsEnableHeight !== 0) {
      obj.voteExtensionsEnableHeight = Math.round(message.voteExtensionsEnableHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ABCIParams>, I>>(base?: I): ABCIParams {
    return ABCIParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ABCIParams>, I>>(object: I): ABCIParams {
    const message = createBaseABCIParams();
    message.voteExtensionsEnableHeight = object.voteExtensionsEnableHeight ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
