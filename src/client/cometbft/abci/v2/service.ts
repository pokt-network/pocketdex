// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: cometbft/abci/v2/service.proto

/* eslint-disable */
import { BinaryReader } from "@bufbuild/protobuf/wire";
import {
  ApplySnapshotChunkRequest,
  ApplySnapshotChunkResponse,
  CheckTxRequest,
  CheckTxResponse,
  CommitRequest,
  CommitResponse,
  EchoRequest,
  EchoResponse,
  ExtendVoteRequest,
  ExtendVoteResponse,
  FinalizeBlockRequest,
  FinalizeBlockResponse,
  FlushRequest,
  FlushResponse,
  InfoRequest,
  InfoResponse,
  InitChainRequest,
  InitChainResponse,
  ListSnapshotsRequest,
  ListSnapshotsResponse,
  LoadSnapshotChunkRequest,
  LoadSnapshotChunkResponse,
  OfferSnapshotRequest,
  OfferSnapshotResponse,
  PrepareProposalRequest,
  PrepareProposalResponse,
  ProcessProposalRequest,
  ProcessProposalResponse,
  QueryRequest,
  QueryResponse,
  VerifyVoteExtensionRequest,
  VerifyVoteExtensionResponse,
} from "./types";

export const protobufPackage = "cometbft.abci.v2";

/** ABCIService is a service for an ABCI application. */
export interface ABCIService {
  /** Echo returns back the same message it is sent. */
  Echo(request: EchoRequest): Promise<EchoResponse>;
  /** Flush flushes the write buffer. */
  Flush(request: FlushRequest): Promise<FlushResponse>;
  /** Info returns information about the application state. */
  Info(request: InfoRequest): Promise<InfoResponse>;
  /** CheckTx validates a transaction. */
  CheckTx(request: CheckTxRequest): Promise<CheckTxResponse>;
  /** Query queries the application state. */
  Query(request: QueryRequest): Promise<QueryResponse>;
  /** Commit commits a block of transactions. */
  Commit(request: CommitRequest): Promise<CommitResponse>;
  /** InitChain initializes the blockchain. */
  InitChain(request: InitChainRequest): Promise<InitChainResponse>;
  /** ListSnapshots lists all the available snapshots. */
  ListSnapshots(request: ListSnapshotsRequest): Promise<ListSnapshotsResponse>;
  /** OfferSnapshot sends a snapshot offer. */
  OfferSnapshot(request: OfferSnapshotRequest): Promise<OfferSnapshotResponse>;
  /** LoadSnapshotChunk returns a chunk of snapshot. */
  LoadSnapshotChunk(request: LoadSnapshotChunkRequest): Promise<LoadSnapshotChunkResponse>;
  /** ApplySnapshotChunk applies a chunk of snapshot. */
  ApplySnapshotChunk(request: ApplySnapshotChunkRequest): Promise<ApplySnapshotChunkResponse>;
  /** PrepareProposal returns a proposal for the next block. */
  PrepareProposal(request: PrepareProposalRequest): Promise<PrepareProposalResponse>;
  /** ProcessProposal validates a proposal. */
  ProcessProposal(request: ProcessProposalRequest): Promise<ProcessProposalResponse>;
  /** ExtendVote extends a vote with application-injected data (vote extensions). */
  ExtendVote(request: ExtendVoteRequest): Promise<ExtendVoteResponse>;
  /** VerifyVoteExtension verifies a vote extension. */
  VerifyVoteExtension(request: VerifyVoteExtensionRequest): Promise<VerifyVoteExtensionResponse>;
  /** FinalizeBlock finalizes a block. */
  FinalizeBlock(request: FinalizeBlockRequest): Promise<FinalizeBlockResponse>;
}

export const ABCIServiceServiceName = "cometbft.abci.v2.ABCIService";
export class ABCIServiceClientImpl implements ABCIService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ABCIServiceServiceName;
    this.rpc = rpc;
    this.Echo = this.Echo.bind(this);
    this.Flush = this.Flush.bind(this);
    this.Info = this.Info.bind(this);
    this.CheckTx = this.CheckTx.bind(this);
    this.Query = this.Query.bind(this);
    this.Commit = this.Commit.bind(this);
    this.InitChain = this.InitChain.bind(this);
    this.ListSnapshots = this.ListSnapshots.bind(this);
    this.OfferSnapshot = this.OfferSnapshot.bind(this);
    this.LoadSnapshotChunk = this.LoadSnapshotChunk.bind(this);
    this.ApplySnapshotChunk = this.ApplySnapshotChunk.bind(this);
    this.PrepareProposal = this.PrepareProposal.bind(this);
    this.ProcessProposal = this.ProcessProposal.bind(this);
    this.ExtendVote = this.ExtendVote.bind(this);
    this.VerifyVoteExtension = this.VerifyVoteExtension.bind(this);
    this.FinalizeBlock = this.FinalizeBlock.bind(this);
  }
  Echo(request: EchoRequest): Promise<EchoResponse> {
    const data = EchoRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Echo", data);
    return promise.then((data) => EchoResponse.decode(new BinaryReader(data)));
  }

  Flush(request: FlushRequest): Promise<FlushResponse> {
    const data = FlushRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Flush", data);
    return promise.then((data) => FlushResponse.decode(new BinaryReader(data)));
  }

  Info(request: InfoRequest): Promise<InfoResponse> {
    const data = InfoRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Info", data);
    return promise.then((data) => InfoResponse.decode(new BinaryReader(data)));
  }

  CheckTx(request: CheckTxRequest): Promise<CheckTxResponse> {
    const data = CheckTxRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CheckTx", data);
    return promise.then((data) => CheckTxResponse.decode(new BinaryReader(data)));
  }

  Query(request: QueryRequest): Promise<QueryResponse> {
    const data = QueryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Query", data);
    return promise.then((data) => QueryResponse.decode(new BinaryReader(data)));
  }

  Commit(request: CommitRequest): Promise<CommitResponse> {
    const data = CommitRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Commit", data);
    return promise.then((data) => CommitResponse.decode(new BinaryReader(data)));
  }

  InitChain(request: InitChainRequest): Promise<InitChainResponse> {
    const data = InitChainRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "InitChain", data);
    return promise.then((data) => InitChainResponse.decode(new BinaryReader(data)));
  }

  ListSnapshots(request: ListSnapshotsRequest): Promise<ListSnapshotsResponse> {
    const data = ListSnapshotsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListSnapshots", data);
    return promise.then((data) => ListSnapshotsResponse.decode(new BinaryReader(data)));
  }

  OfferSnapshot(request: OfferSnapshotRequest): Promise<OfferSnapshotResponse> {
    const data = OfferSnapshotRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OfferSnapshot", data);
    return promise.then((data) => OfferSnapshotResponse.decode(new BinaryReader(data)));
  }

  LoadSnapshotChunk(request: LoadSnapshotChunkRequest): Promise<LoadSnapshotChunkResponse> {
    const data = LoadSnapshotChunkRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "LoadSnapshotChunk", data);
    return promise.then((data) => LoadSnapshotChunkResponse.decode(new BinaryReader(data)));
  }

  ApplySnapshotChunk(request: ApplySnapshotChunkRequest): Promise<ApplySnapshotChunkResponse> {
    const data = ApplySnapshotChunkRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ApplySnapshotChunk", data);
    return promise.then((data) => ApplySnapshotChunkResponse.decode(new BinaryReader(data)));
  }

  PrepareProposal(request: PrepareProposalRequest): Promise<PrepareProposalResponse> {
    const data = PrepareProposalRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PrepareProposal", data);
    return promise.then((data) => PrepareProposalResponse.decode(new BinaryReader(data)));
  }

  ProcessProposal(request: ProcessProposalRequest): Promise<ProcessProposalResponse> {
    const data = ProcessProposalRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProcessProposal", data);
    return promise.then((data) => ProcessProposalResponse.decode(new BinaryReader(data)));
  }

  ExtendVote(request: ExtendVoteRequest): Promise<ExtendVoteResponse> {
    const data = ExtendVoteRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ExtendVote", data);
    return promise.then((data) => ExtendVoteResponse.decode(new BinaryReader(data)));
  }

  VerifyVoteExtension(request: VerifyVoteExtensionRequest): Promise<VerifyVoteExtensionResponse> {
    const data = VerifyVoteExtensionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "VerifyVoteExtension", data);
    return promise.then((data) => VerifyVoteExtensionResponse.decode(new BinaryReader(data)));
  }

  FinalizeBlock(request: FinalizeBlockRequest): Promise<FinalizeBlockResponse> {
    const data = FinalizeBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FinalizeBlock", data);
    return promise.then((data) => FinalizeBlockResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
