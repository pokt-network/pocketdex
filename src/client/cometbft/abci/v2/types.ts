// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: cometbft/abci/v2/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { ProofOps } from "../../crypto/v1/proof";
import { ConsensusParams } from "../../types/v2/params";
import { BlockIDFlag, blockIDFlagFromJSON, blockIDFlagToJSON } from "../../types/v2/validator";

export const protobufPackage = "cometbft.abci.v2";

/**
 * Type of the transaction check request.
 *
 * This enumeration is incompatible with the CheckTxType definition in
 * cometbft.abci.v1beta1 and therefore shall not be used in encoding with the same
 * field number.
 */
export enum CheckTxType {
  /** CHECK_TX_TYPE_UNKNOWN - Unknown */
  CHECK_TX_TYPE_UNKNOWN = 0,
  /** CHECK_TX_TYPE_RECHECK - Recheck (2nd, 3rd, etc.) */
  CHECK_TX_TYPE_RECHECK = 1,
  /** CHECK_TX_TYPE_CHECK - Check (1st time) */
  CHECK_TX_TYPE_CHECK = 2,
  UNRECOGNIZED = -1,
}

export function checkTxTypeFromJSON(object: any): CheckTxType {
  switch (object) {
    case 0:
    case "CHECK_TX_TYPE_UNKNOWN":
      return CheckTxType.CHECK_TX_TYPE_UNKNOWN;
    case 1:
    case "CHECK_TX_TYPE_RECHECK":
      return CheckTxType.CHECK_TX_TYPE_RECHECK;
    case 2:
    case "CHECK_TX_TYPE_CHECK":
      return CheckTxType.CHECK_TX_TYPE_CHECK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CheckTxType.UNRECOGNIZED;
  }
}

export function checkTxTypeToJSON(object: CheckTxType): string {
  switch (object) {
    case CheckTxType.CHECK_TX_TYPE_UNKNOWN:
      return "CHECK_TX_TYPE_UNKNOWN";
    case CheckTxType.CHECK_TX_TYPE_RECHECK:
      return "CHECK_TX_TYPE_RECHECK";
    case CheckTxType.CHECK_TX_TYPE_CHECK:
      return "CHECK_TX_TYPE_CHECK";
    case CheckTxType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The result of offering a snapshot. */
export enum OfferSnapshotResult {
  /** OFFER_SNAPSHOT_RESULT_UNKNOWN - Unknown result, abort all snapshot restoration */
  OFFER_SNAPSHOT_RESULT_UNKNOWN = 0,
  /** OFFER_SNAPSHOT_RESULT_ACCEPT - Snapshot accepted, apply chunks */
  OFFER_SNAPSHOT_RESULT_ACCEPT = 1,
  /** OFFER_SNAPSHOT_RESULT_ABORT - Abort all snapshot restoration */
  OFFER_SNAPSHOT_RESULT_ABORT = 2,
  /** OFFER_SNAPSHOT_RESULT_REJECT - Reject this specific snapshot, try others */
  OFFER_SNAPSHOT_RESULT_REJECT = 3,
  /** OFFER_SNAPSHOT_RESULT_REJECT_FORMAT - Reject all snapshots of this format, try others */
  OFFER_SNAPSHOT_RESULT_REJECT_FORMAT = 4,
  /** OFFER_SNAPSHOT_RESULT_REJECT_SENDER - Reject all snapshots from the sender(s), try others */
  OFFER_SNAPSHOT_RESULT_REJECT_SENDER = 5,
  UNRECOGNIZED = -1,
}

export function offerSnapshotResultFromJSON(object: any): OfferSnapshotResult {
  switch (object) {
    case 0:
    case "OFFER_SNAPSHOT_RESULT_UNKNOWN":
      return OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_UNKNOWN;
    case 1:
    case "OFFER_SNAPSHOT_RESULT_ACCEPT":
      return OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_ACCEPT;
    case 2:
    case "OFFER_SNAPSHOT_RESULT_ABORT":
      return OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_ABORT;
    case 3:
    case "OFFER_SNAPSHOT_RESULT_REJECT":
      return OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_REJECT;
    case 4:
    case "OFFER_SNAPSHOT_RESULT_REJECT_FORMAT":
      return OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_REJECT_FORMAT;
    case 5:
    case "OFFER_SNAPSHOT_RESULT_REJECT_SENDER":
      return OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_REJECT_SENDER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OfferSnapshotResult.UNRECOGNIZED;
  }
}

export function offerSnapshotResultToJSON(object: OfferSnapshotResult): string {
  switch (object) {
    case OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_UNKNOWN:
      return "OFFER_SNAPSHOT_RESULT_UNKNOWN";
    case OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_ACCEPT:
      return "OFFER_SNAPSHOT_RESULT_ACCEPT";
    case OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_ABORT:
      return "OFFER_SNAPSHOT_RESULT_ABORT";
    case OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_REJECT:
      return "OFFER_SNAPSHOT_RESULT_REJECT";
    case OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_REJECT_FORMAT:
      return "OFFER_SNAPSHOT_RESULT_REJECT_FORMAT";
    case OfferSnapshotResult.OFFER_SNAPSHOT_RESULT_REJECT_SENDER:
      return "OFFER_SNAPSHOT_RESULT_REJECT_SENDER";
    case OfferSnapshotResult.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The result of applying a snapshot chunk. */
export enum ApplySnapshotChunkResult {
  /** APPLY_SNAPSHOT_CHUNK_RESULT_UNKNOWN - Unknown result, abort all snapshot restoration */
  APPLY_SNAPSHOT_CHUNK_RESULT_UNKNOWN = 0,
  /** APPLY_SNAPSHOT_CHUNK_RESULT_ACCEPT - Chunk successfully accepted */
  APPLY_SNAPSHOT_CHUNK_RESULT_ACCEPT = 1,
  /** APPLY_SNAPSHOT_CHUNK_RESULT_ABORT - Abort all snapshot restoration */
  APPLY_SNAPSHOT_CHUNK_RESULT_ABORT = 2,
  /** APPLY_SNAPSHOT_CHUNK_RESULT_RETRY - Retry chunk (combine with refetch and reject) */
  APPLY_SNAPSHOT_CHUNK_RESULT_RETRY = 3,
  /** APPLY_SNAPSHOT_CHUNK_RESULT_RETRY_SNAPSHOT - Retry snapshot (combine with refetch and reject) */
  APPLY_SNAPSHOT_CHUNK_RESULT_RETRY_SNAPSHOT = 4,
  /** APPLY_SNAPSHOT_CHUNK_RESULT_REJECT_SNAPSHOT - Reject this snapshot, try others */
  APPLY_SNAPSHOT_CHUNK_RESULT_REJECT_SNAPSHOT = 5,
  UNRECOGNIZED = -1,
}

export function applySnapshotChunkResultFromJSON(object: any): ApplySnapshotChunkResult {
  switch (object) {
    case 0:
    case "APPLY_SNAPSHOT_CHUNK_RESULT_UNKNOWN":
      return ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_UNKNOWN;
    case 1:
    case "APPLY_SNAPSHOT_CHUNK_RESULT_ACCEPT":
      return ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_ACCEPT;
    case 2:
    case "APPLY_SNAPSHOT_CHUNK_RESULT_ABORT":
      return ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_ABORT;
    case 3:
    case "APPLY_SNAPSHOT_CHUNK_RESULT_RETRY":
      return ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_RETRY;
    case 4:
    case "APPLY_SNAPSHOT_CHUNK_RESULT_RETRY_SNAPSHOT":
      return ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_RETRY_SNAPSHOT;
    case 5:
    case "APPLY_SNAPSHOT_CHUNK_RESULT_REJECT_SNAPSHOT":
      return ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_REJECT_SNAPSHOT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ApplySnapshotChunkResult.UNRECOGNIZED;
  }
}

export function applySnapshotChunkResultToJSON(object: ApplySnapshotChunkResult): string {
  switch (object) {
    case ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_UNKNOWN:
      return "APPLY_SNAPSHOT_CHUNK_RESULT_UNKNOWN";
    case ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_ACCEPT:
      return "APPLY_SNAPSHOT_CHUNK_RESULT_ACCEPT";
    case ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_ABORT:
      return "APPLY_SNAPSHOT_CHUNK_RESULT_ABORT";
    case ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_RETRY:
      return "APPLY_SNAPSHOT_CHUNK_RESULT_RETRY";
    case ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_RETRY_SNAPSHOT:
      return "APPLY_SNAPSHOT_CHUNK_RESULT_RETRY_SNAPSHOT";
    case ApplySnapshotChunkResult.APPLY_SNAPSHOT_CHUNK_RESULT_REJECT_SNAPSHOT:
      return "APPLY_SNAPSHOT_CHUNK_RESULT_REJECT_SNAPSHOT";
    case ApplySnapshotChunkResult.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ProcessProposalStatus is the status of the proposal processing. */
export enum ProcessProposalStatus {
  /** PROCESS_PROPOSAL_STATUS_UNKNOWN - Unknown */
  PROCESS_PROPOSAL_STATUS_UNKNOWN = 0,
  /** PROCESS_PROPOSAL_STATUS_ACCEPT - Accepted */
  PROCESS_PROPOSAL_STATUS_ACCEPT = 1,
  /** PROCESS_PROPOSAL_STATUS_REJECT - Rejected */
  PROCESS_PROPOSAL_STATUS_REJECT = 2,
  UNRECOGNIZED = -1,
}

export function processProposalStatusFromJSON(object: any): ProcessProposalStatus {
  switch (object) {
    case 0:
    case "PROCESS_PROPOSAL_STATUS_UNKNOWN":
      return ProcessProposalStatus.PROCESS_PROPOSAL_STATUS_UNKNOWN;
    case 1:
    case "PROCESS_PROPOSAL_STATUS_ACCEPT":
      return ProcessProposalStatus.PROCESS_PROPOSAL_STATUS_ACCEPT;
    case 2:
    case "PROCESS_PROPOSAL_STATUS_REJECT":
      return ProcessProposalStatus.PROCESS_PROPOSAL_STATUS_REJECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProcessProposalStatus.UNRECOGNIZED;
  }
}

export function processProposalStatusToJSON(object: ProcessProposalStatus): string {
  switch (object) {
    case ProcessProposalStatus.PROCESS_PROPOSAL_STATUS_UNKNOWN:
      return "PROCESS_PROPOSAL_STATUS_UNKNOWN";
    case ProcessProposalStatus.PROCESS_PROPOSAL_STATUS_ACCEPT:
      return "PROCESS_PROPOSAL_STATUS_ACCEPT";
    case ProcessProposalStatus.PROCESS_PROPOSAL_STATUS_REJECT:
      return "PROCESS_PROPOSAL_STATUS_REJECT";
    case ProcessProposalStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** VerifyVoteExtensionStatus is the status of the vote extension verification. */
export enum VerifyVoteExtensionStatus {
  /** VERIFY_VOTE_EXTENSION_STATUS_UNKNOWN - Unknown */
  VERIFY_VOTE_EXTENSION_STATUS_UNKNOWN = 0,
  /** VERIFY_VOTE_EXTENSION_STATUS_ACCEPT - Accepted */
  VERIFY_VOTE_EXTENSION_STATUS_ACCEPT = 1,
  /**
   * VERIFY_VOTE_EXTENSION_STATUS_REJECT - Rejecting the vote extension will reject the entire precommit by the sender.
   * Incorrectly implementing this thus has liveness implications as it may affect
   * CometBFT's ability to receive 2/3+ valid votes to finalize the block.
   * Honest nodes should never be rejected.
   */
  VERIFY_VOTE_EXTENSION_STATUS_REJECT = 2,
  UNRECOGNIZED = -1,
}

export function verifyVoteExtensionStatusFromJSON(object: any): VerifyVoteExtensionStatus {
  switch (object) {
    case 0:
    case "VERIFY_VOTE_EXTENSION_STATUS_UNKNOWN":
      return VerifyVoteExtensionStatus.VERIFY_VOTE_EXTENSION_STATUS_UNKNOWN;
    case 1:
    case "VERIFY_VOTE_EXTENSION_STATUS_ACCEPT":
      return VerifyVoteExtensionStatus.VERIFY_VOTE_EXTENSION_STATUS_ACCEPT;
    case 2:
    case "VERIFY_VOTE_EXTENSION_STATUS_REJECT":
      return VerifyVoteExtensionStatus.VERIFY_VOTE_EXTENSION_STATUS_REJECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VerifyVoteExtensionStatus.UNRECOGNIZED;
  }
}

export function verifyVoteExtensionStatusToJSON(object: VerifyVoteExtensionStatus): string {
  switch (object) {
    case VerifyVoteExtensionStatus.VERIFY_VOTE_EXTENSION_STATUS_UNKNOWN:
      return "VERIFY_VOTE_EXTENSION_STATUS_UNKNOWN";
    case VerifyVoteExtensionStatus.VERIFY_VOTE_EXTENSION_STATUS_ACCEPT:
      return "VERIFY_VOTE_EXTENSION_STATUS_ACCEPT";
    case VerifyVoteExtensionStatus.VERIFY_VOTE_EXTENSION_STATUS_REJECT:
      return "VERIFY_VOTE_EXTENSION_STATUS_REJECT";
    case VerifyVoteExtensionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The type of misbehavior committed by a validator. */
export enum MisbehaviorType {
  /** MISBEHAVIOR_TYPE_UNKNOWN - Unknown */
  MISBEHAVIOR_TYPE_UNKNOWN = 0,
  /** MISBEHAVIOR_TYPE_DUPLICATE_VOTE - Duplicate vote */
  MISBEHAVIOR_TYPE_DUPLICATE_VOTE = 1,
  /** MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK - Light client attack */
  MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK = 2,
  UNRECOGNIZED = -1,
}

export function misbehaviorTypeFromJSON(object: any): MisbehaviorType {
  switch (object) {
    case 0:
    case "MISBEHAVIOR_TYPE_UNKNOWN":
      return MisbehaviorType.MISBEHAVIOR_TYPE_UNKNOWN;
    case 1:
    case "MISBEHAVIOR_TYPE_DUPLICATE_VOTE":
      return MisbehaviorType.MISBEHAVIOR_TYPE_DUPLICATE_VOTE;
    case 2:
    case "MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK":
      return MisbehaviorType.MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MisbehaviorType.UNRECOGNIZED;
  }
}

export function misbehaviorTypeToJSON(object: MisbehaviorType): string {
  switch (object) {
    case MisbehaviorType.MISBEHAVIOR_TYPE_UNKNOWN:
      return "MISBEHAVIOR_TYPE_UNKNOWN";
    case MisbehaviorType.MISBEHAVIOR_TYPE_DUPLICATE_VOTE:
      return "MISBEHAVIOR_TYPE_DUPLICATE_VOTE";
    case MisbehaviorType.MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK:
      return "MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK";
    case MisbehaviorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request represents a request to the ABCI application. */
export interface Request {
  echo?: EchoRequest | undefined;
  flush?: FlushRequest | undefined;
  info?: InfoRequest | undefined;
  initChain?: InitChainRequest | undefined;
  query?: QueryRequest | undefined;
  checkTx?: CheckTxRequest | undefined;
  commit?: CommitRequest | undefined;
  listSnapshots?: ListSnapshotsRequest | undefined;
  offerSnapshot?: OfferSnapshotRequest | undefined;
  loadSnapshotChunk?: LoadSnapshotChunkRequest | undefined;
  applySnapshotChunk?: ApplySnapshotChunkRequest | undefined;
  prepareProposal?: PrepareProposalRequest | undefined;
  processProposal?: ProcessProposalRequest | undefined;
  extendVote?: ExtendVoteRequest | undefined;
  verifyVoteExtension?: VerifyVoteExtensionRequest | undefined;
  finalizeBlock?: FinalizeBlockRequest | undefined;
}

/** EchoRequest is a request to "echo" the given string. */
export interface EchoRequest {
  message: string;
}

/** FlushRequest is a request to flush the write buffer. */
export interface FlushRequest {
}

/** InfoRequest is a request for the ABCI application version. */
export interface InfoRequest {
  version: string;
  blockVersion: number;
  p2pVersion: number;
  abciVersion: string;
}

/** InitChainRequest is a request to initialize the blockchain. */
export interface InitChainRequest {
  time: Date | undefined;
  chainId: string;
  consensusParams: ConsensusParams | undefined;
  validators: ValidatorUpdate[];
  appStateBytes: Uint8Array;
  initialHeight: number;
}

/** QueryRequest is a request to query the application state. */
export interface QueryRequest {
  data: Uint8Array;
  path: string;
  height: number;
  prove: boolean;
}

/** CheckTxRequest is a request to check that the transaction is valid. */
export interface CheckTxRequest {
  tx: Uint8Array;
  type: CheckTxType;
}

/** CommitRequest is a request to commit the pending application state. */
export interface CommitRequest {
}

/** Request to list available snapshots. */
export interface ListSnapshotsRequest {
}

/** Request offering a snapshot to the application. */
export interface OfferSnapshotRequest {
  /** snapshot offered by peers */
  snapshot:
    | Snapshot
    | undefined;
  /** light client-verified app hash for snapshot height */
  appHash: Uint8Array;
}

/** Request to load a snapshot chunk. */
export interface LoadSnapshotChunkRequest {
  height: number;
  format: number;
  chunk: number;
}

/** Request to apply a snapshot chunk. */
export interface ApplySnapshotChunkRequest {
  index: number;
  chunk: Uint8Array;
  sender: string;
}

/**
 * PrepareProposalRequest is a request for the ABCI application to prepare a new
 * block proposal.
 */
export interface PrepareProposalRequest {
  /** the modified transactions cannot exceed this size. */
  maxTxBytes: number;
  /**
   * txs is an array of transactions that will be included in a block,
   * sent to the app for possible modifications.
   */
  txs: Uint8Array[];
  localLastCommit: ExtendedCommitInfo | undefined;
  misbehavior: Misbehavior[];
  height: number;
  time: Date | undefined;
  nextValidatorsHash: Uint8Array;
  /** address of the public key of the validator proposing the block. */
  proposerAddress: Uint8Array;
}

/**
 * ProcessProposalRequest is a request for the ABCI application to process a proposal
 * received from another validator.
 */
export interface ProcessProposalRequest {
  txs: Uint8Array[];
  proposedLastCommit: CommitInfo | undefined;
  misbehavior: Misbehavior[];
  /** Merkle root hash of the fields of the proposed block. */
  hash: Uint8Array;
  height: number;
  time: Date | undefined;
  nextValidatorsHash: Uint8Array;
  /** address of the public key of the original proposer of the block. */
  proposerAddress: Uint8Array;
}

/** ExtendVoteRequest extends a precommit vote with application-injected data. */
export interface ExtendVoteRequest {
  /** the hash of the block that this vote may be referring to */
  hash: Uint8Array;
  /** the height of the extended vote */
  height: number;
  /** info of the block that this vote may be referring to */
  time: Date | undefined;
  txs: Uint8Array[];
  proposedLastCommit: CommitInfo | undefined;
  misbehavior: Misbehavior[];
  nextValidatorsHash: Uint8Array;
  /** address of the public key of the original proposer of the block. */
  proposerAddress: Uint8Array;
}

/**
 * VerifyVoteExtensionRequest is a request for the application to verify a vote extension
 * produced by a different validator.
 * The request contains two vote extension fields: one that is replay-protected ('vote_extension')
 * and one that is not ('non_rp_vote_extension').
 */
export interface VerifyVoteExtensionRequest {
  /** the hash of the block that this received vote corresponds to */
  hash: Uint8Array;
  /** the validator that signed the vote extension */
  validatorAddress: Uint8Array;
  height: number;
  /** replay-protected vote extension */
  voteExtension: Uint8Array;
  /** non-replay-protected vote extension */
  nonRpVoteExtension: Uint8Array;
}

/** FinalizeBlockRequest is a request to finalize the block. */
export interface FinalizeBlockRequest {
  txs: Uint8Array[];
  decidedLastCommit: CommitInfo | undefined;
  misbehavior: Misbehavior[];
  /** Merkle root hash of the fields of the decided block. */
  hash: Uint8Array;
  height: number;
  time: Date | undefined;
  nextValidatorsHash: Uint8Array;
  /** address of the public key of the original proposer of the block. */
  proposerAddress: Uint8Array;
  /** If the node is syncing/replaying blocks - target height. If not, syncing_to == height. */
  syncingToHeight: number;
}

/** Response represents a response from the ABCI application. */
export interface Response {
  exception?: ExceptionResponse | undefined;
  echo?: EchoResponse | undefined;
  flush?: FlushResponse | undefined;
  info?: InfoResponse | undefined;
  initChain?: InitChainResponse | undefined;
  query?: QueryResponse | undefined;
  checkTx?: CheckTxResponse | undefined;
  commit?: CommitResponse | undefined;
  listSnapshots?: ListSnapshotsResponse | undefined;
  offerSnapshot?: OfferSnapshotResponse | undefined;
  loadSnapshotChunk?: LoadSnapshotChunkResponse | undefined;
  applySnapshotChunk?: ApplySnapshotChunkResponse | undefined;
  prepareProposal?: PrepareProposalResponse | undefined;
  processProposal?: ProcessProposalResponse | undefined;
  extendVote?: ExtendVoteResponse | undefined;
  verifyVoteExtension?: VerifyVoteExtensionResponse | undefined;
  finalizeBlock?: FinalizeBlockResponse | undefined;
}

/** nondeterministic */
export interface ExceptionResponse {
  error: string;
}

/** EchoResponse indicates that the connection is still alive. */
export interface EchoResponse {
  message: string;
}

/** FlushResponse indicates that the write buffer was flushed. */
export interface FlushResponse {
}

/** InfoResponse contains the ABCI application version information. */
export interface InfoResponse {
  data: string;
  version: string;
  appVersion: number;
  lastBlockHeight: number;
  lastBlockAppHash: Uint8Array;
  lanePriorities: { [key: string]: number };
  defaultLane: string;
}

export interface InfoResponse_LanePrioritiesEntry {
  key: string;
  value: number;
}

/**
 * InitChainResponse contains the ABCI application's hash and updates to the
 * validator set and/or the consensus params, if any.
 */
export interface InitChainResponse {
  consensusParams: ConsensusParams | undefined;
  validators: ValidatorUpdate[];
  appHash: Uint8Array;
}

/** QueryResponse contains the ABCI application data along with a proof. */
export interface QueryResponse {
  code: number;
  /** bytes data = 2; // use "value" instead. */
  log: string;
  /** nondeterministic */
  info: string;
  index: number;
  key: Uint8Array;
  value: Uint8Array;
  proofOps: ProofOps | undefined;
  height: number;
  codespace: string;
}

/**
 * CheckTxResponse shows if the transaction was deemed valid by the ABCI
 * application.
 */
export interface CheckTxResponse {
  code: number;
  data: Uint8Array;
  /** nondeterministic */
  log: string;
  /** nondeterministic */
  info: string;
  gasWanted: number;
  gasUsed: number;
  /** nondeterministic */
  events: Event[];
  codespace: string;
  laneId: string;
}

/** CommitResponse indicates how much blocks should CometBFT retain. */
export interface CommitResponse {
  retainHeight: number;
}

/** ListSnapshotsResponse contains the list of snapshots. */
export interface ListSnapshotsResponse {
  snapshots: Snapshot[];
}

/**
 * OfferSnapshotResponse indicates the ABCI application decision whenever to
 * provide a snapshot to the requester or not.
 */
export interface OfferSnapshotResponse {
  result: OfferSnapshotResult;
}

/** LoadSnapshotChunkResponse returns a snapshot's chunk. */
export interface LoadSnapshotChunkResponse {
  chunk: Uint8Array;
}

/** ApplySnapshotChunkResponse returns a result of applying the specified chunk. */
export interface ApplySnapshotChunkResponse {
  result: ApplySnapshotChunkResult;
  /** Chunks to refetch and reapply */
  refetchChunks: number[];
  /** Chunk senders to reject and ban */
  rejectSenders: string[];
}

/** PrepareProposalResponse contains a list of transactions, which will form a block. */
export interface PrepareProposalResponse {
  txs: Uint8Array[];
}

/**
 * ProcessProposalResponse indicates the ABCI application's decision whenever
 * the given proposal should be accepted or not.
 */
export interface ProcessProposalResponse {
  status: ProcessProposalStatus;
}

/**
 * ExtendVoteResponse contains the vote extension that the application would like to
 * attach to its next precommit vote.
 * Information in `vote_extension` will be replay-protected.
 * Information in `non_rp_extension` will not be replay-protected.
 */
export interface ExtendVoteResponse {
  /** this extension's signature is replay-protected */
  voteExtension: Uint8Array;
  /** this extension's signature is _not_ replay-protected */
  nonRpExtension: Uint8Array;
}

/**
 * VerifyVoteExtensionResponse indicates the ABCI application's decision
 * whenever the vote extension should be accepted or not.
 */
export interface VerifyVoteExtensionResponse {
  status: VerifyVoteExtensionStatus;
}

/** FinalizeBlockResponse contains the result of executing the block. */
export interface FinalizeBlockResponse {
  /** set of block events emitted as part of executing the block */
  events: Event[];
  /**
   * the result of executing each transaction including the events
   * the particular transaction emitted. This should match the order
   * of the transactions delivered in the block itself
   */
  txResults: ExecTxResult[];
  /** a list of updates to the validator set. These will reflect the validator set at current height + 2. */
  validatorUpdates: ValidatorUpdate[];
  /** updates to the consensus params, if any. */
  consensusParamUpdates:
    | ConsensusParams
    | undefined;
  /**
   * app_hash is the hash of the applications' state which is used to confirm
   * that execution of the transactions was deterministic.
   * It is up to the application to decide which algorithm to use.
   */
  appHash: Uint8Array;
  /**
   * delay between the time when this block is committed and the next height is started.
   * previously `timeout_commit` in config.toml
   */
  nextBlockDelay: Duration | undefined;
}

/** CommitInfo contains votes for the particular round. */
export interface CommitInfo {
  round: number;
  votes: VoteInfo[];
}

/**
 * ExtendedCommitInfo is similar to CommitInfo except that it is only used in
 * the PrepareProposal request such that Tendermint can provide vote extensions
 * to the application.
 */
export interface ExtendedCommitInfo {
  /** The round at which the block proposer decided in the previous height. */
  round: number;
  /**
   * List of validators' addresses in the last validator set with their voting
   * information, including vote extensions.
   */
  votes: ExtendedVoteInfo[];
}

/**
 * Event allows application developers to attach additional information to
 * ResponseFinalizeBlock and ResponseCheckTx.
 * Up to 0.37, this could also be used in ResponseBeginBlock, ResponseEndBlock,
 * and ResponseDeliverTx.
 * Later, transactions may be queried using these events.
 */
export interface Event {
  type: string;
  attributes: EventAttribute[];
}

/** EventAttribute is a single key-value pair, associated with an event. */
export interface EventAttribute {
  key: string;
  value: string;
  /** nondeterministic */
  index: boolean;
}

/**
 * ExecTxResult contains results of executing one individual transaction.
 *
 * * Its structure is equivalent to #ResponseDeliverTx which will be deprecated/deleted
 */
export interface ExecTxResult {
  code: number;
  data: Uint8Array;
  /** nondeterministic */
  log: string;
  /** nondeterministic */
  info: string;
  gasWanted: number;
  gasUsed: number;
  /** nondeterministic */
  events: Event[];
  codespace: string;
}

/**
 * TxResult contains results of executing the transaction.
 *
 * One usage is indexing transaction results.
 */
export interface TxResult {
  height: number;
  index: number;
  tx: Uint8Array;
  result: ExecTxResult | undefined;
}

/** Validator in the validator set. */
export interface Validator {
  /** The first 20 bytes of SHA256(public key) */
  address: Uint8Array;
  /** PubKey pub_key = 2 [(gogoproto.nullable)=false]; */
  power: number;
}

/** ValidatorUpdate is a singular update to a validator set. */
export interface ValidatorUpdate {
  power: number;
  pubKeyBytes: Uint8Array;
  pubKeyType: string;
}

/** VoteInfo contains the information about the vote. */
export interface VoteInfo {
  validator: Validator | undefined;
  blockIdFlag: BlockIDFlag;
}

/** ExtendedVoteInfo extends VoteInfo with the vote extensions (non-deterministic). */
export interface ExtendedVoteInfo {
  /** The validator that sent the vote. */
  validator:
    | Validator
    | undefined;
  /** Non-deterministic extension provided by the sending validator's application. */
  voteExtension: Uint8Array;
  /** Vote extension signature created by CometBFT */
  extensionSignature: Uint8Array;
  /** block_id_flag indicates whether the validator voted for a block, nil, or did not vote at all */
  blockIdFlag: BlockIDFlag;
  /** Non-deterministic non-replay-protected extension provided by the sending validator's application. */
  nonRpVoteExtension: Uint8Array;
  /** Signature on non-replay-protected extension created by CometBFT */
  nonRpExtensionSignature: Uint8Array;
}

/** Misbehavior is a type of misbehavior committed by a validator. */
export interface Misbehavior {
  type: MisbehaviorType;
  /** The offending validator */
  validator:
    | Validator
    | undefined;
  /** The height when the offense occurred */
  height: number;
  /** The corresponding time where the offense occurred */
  time:
    | Date
    | undefined;
  /**
   * Total voting power of the validator set in case the ABCI application does
   * not store historical validators.
   * https://github.com/tendermint/tendermint/issues/4581
   */
  totalVotingPower: number;
}

/** Snapshot of the ABCI application state. */
export interface Snapshot {
  /** The height at which the snapshot was taken */
  height: number;
  /** The application-specific snapshot format */
  format: number;
  /** Number of chunks in the snapshot */
  chunks: number;
  /** Arbitrary snapshot hash, equal only if identical */
  hash: Uint8Array;
  /** Arbitrary application metadata */
  metadata: Uint8Array;
}

function createBaseRequest(): Request {
  return {
    echo: undefined,
    flush: undefined,
    info: undefined,
    initChain: undefined,
    query: undefined,
    checkTx: undefined,
    commit: undefined,
    listSnapshots: undefined,
    offerSnapshot: undefined,
    loadSnapshotChunk: undefined,
    applySnapshotChunk: undefined,
    prepareProposal: undefined,
    processProposal: undefined,
    extendVote: undefined,
    verifyVoteExtension: undefined,
    finalizeBlock: undefined,
  };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.echo !== undefined) {
      EchoRequest.encode(message.echo, writer.uint32(10).fork()).join();
    }
    if (message.flush !== undefined) {
      FlushRequest.encode(message.flush, writer.uint32(18).fork()).join();
    }
    if (message.info !== undefined) {
      InfoRequest.encode(message.info, writer.uint32(26).fork()).join();
    }
    if (message.initChain !== undefined) {
      InitChainRequest.encode(message.initChain, writer.uint32(42).fork()).join();
    }
    if (message.query !== undefined) {
      QueryRequest.encode(message.query, writer.uint32(50).fork()).join();
    }
    if (message.checkTx !== undefined) {
      CheckTxRequest.encode(message.checkTx, writer.uint32(66).fork()).join();
    }
    if (message.commit !== undefined) {
      CommitRequest.encode(message.commit, writer.uint32(90).fork()).join();
    }
    if (message.listSnapshots !== undefined) {
      ListSnapshotsRequest.encode(message.listSnapshots, writer.uint32(98).fork()).join();
    }
    if (message.offerSnapshot !== undefined) {
      OfferSnapshotRequest.encode(message.offerSnapshot, writer.uint32(106).fork()).join();
    }
    if (message.loadSnapshotChunk !== undefined) {
      LoadSnapshotChunkRequest.encode(message.loadSnapshotChunk, writer.uint32(114).fork()).join();
    }
    if (message.applySnapshotChunk !== undefined) {
      ApplySnapshotChunkRequest.encode(message.applySnapshotChunk, writer.uint32(122).fork()).join();
    }
    if (message.prepareProposal !== undefined) {
      PrepareProposalRequest.encode(message.prepareProposal, writer.uint32(130).fork()).join();
    }
    if (message.processProposal !== undefined) {
      ProcessProposalRequest.encode(message.processProposal, writer.uint32(138).fork()).join();
    }
    if (message.extendVote !== undefined) {
      ExtendVoteRequest.encode(message.extendVote, writer.uint32(146).fork()).join();
    }
    if (message.verifyVoteExtension !== undefined) {
      VerifyVoteExtensionRequest.encode(message.verifyVoteExtension, writer.uint32(154).fork()).join();
    }
    if (message.finalizeBlock !== undefined) {
      FinalizeBlockRequest.encode(message.finalizeBlock, writer.uint32(162).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.echo = EchoRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.flush = FlushRequest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.info = InfoRequest.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.initChain = InitChainRequest.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.query = QueryRequest.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.checkTx = CheckTxRequest.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.commit = CommitRequest.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.listSnapshots = ListSnapshotsRequest.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.offerSnapshot = OfferSnapshotRequest.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.loadSnapshotChunk = LoadSnapshotChunkRequest.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.applySnapshotChunk = ApplySnapshotChunkRequest.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.prepareProposal = PrepareProposalRequest.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.processProposal = ProcessProposalRequest.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.extendVote = ExtendVoteRequest.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.verifyVoteExtension = VerifyVoteExtensionRequest.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.finalizeBlock = FinalizeBlockRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      echo: isSet(object.echo) ? EchoRequest.fromJSON(object.echo) : undefined,
      flush: isSet(object.flush) ? FlushRequest.fromJSON(object.flush) : undefined,
      info: isSet(object.info) ? InfoRequest.fromJSON(object.info) : undefined,
      initChain: isSet(object.initChain) ? InitChainRequest.fromJSON(object.initChain) : undefined,
      query: isSet(object.query) ? QueryRequest.fromJSON(object.query) : undefined,
      checkTx: isSet(object.checkTx) ? CheckTxRequest.fromJSON(object.checkTx) : undefined,
      commit: isSet(object.commit) ? CommitRequest.fromJSON(object.commit) : undefined,
      listSnapshots: isSet(object.listSnapshots) ? ListSnapshotsRequest.fromJSON(object.listSnapshots) : undefined,
      offerSnapshot: isSet(object.offerSnapshot) ? OfferSnapshotRequest.fromJSON(object.offerSnapshot) : undefined,
      loadSnapshotChunk: isSet(object.loadSnapshotChunk)
        ? LoadSnapshotChunkRequest.fromJSON(object.loadSnapshotChunk)
        : undefined,
      applySnapshotChunk: isSet(object.applySnapshotChunk)
        ? ApplySnapshotChunkRequest.fromJSON(object.applySnapshotChunk)
        : undefined,
      prepareProposal: isSet(object.prepareProposal)
        ? PrepareProposalRequest.fromJSON(object.prepareProposal)
        : undefined,
      processProposal: isSet(object.processProposal)
        ? ProcessProposalRequest.fromJSON(object.processProposal)
        : undefined,
      extendVote: isSet(object.extendVote) ? ExtendVoteRequest.fromJSON(object.extendVote) : undefined,
      verifyVoteExtension: isSet(object.verifyVoteExtension)
        ? VerifyVoteExtensionRequest.fromJSON(object.verifyVoteExtension)
        : undefined,
      finalizeBlock: isSet(object.finalizeBlock) ? FinalizeBlockRequest.fromJSON(object.finalizeBlock) : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.echo !== undefined) {
      obj.echo = EchoRequest.toJSON(message.echo);
    }
    if (message.flush !== undefined) {
      obj.flush = FlushRequest.toJSON(message.flush);
    }
    if (message.info !== undefined) {
      obj.info = InfoRequest.toJSON(message.info);
    }
    if (message.initChain !== undefined) {
      obj.initChain = InitChainRequest.toJSON(message.initChain);
    }
    if (message.query !== undefined) {
      obj.query = QueryRequest.toJSON(message.query);
    }
    if (message.checkTx !== undefined) {
      obj.checkTx = CheckTxRequest.toJSON(message.checkTx);
    }
    if (message.commit !== undefined) {
      obj.commit = CommitRequest.toJSON(message.commit);
    }
    if (message.listSnapshots !== undefined) {
      obj.listSnapshots = ListSnapshotsRequest.toJSON(message.listSnapshots);
    }
    if (message.offerSnapshot !== undefined) {
      obj.offerSnapshot = OfferSnapshotRequest.toJSON(message.offerSnapshot);
    }
    if (message.loadSnapshotChunk !== undefined) {
      obj.loadSnapshotChunk = LoadSnapshotChunkRequest.toJSON(message.loadSnapshotChunk);
    }
    if (message.applySnapshotChunk !== undefined) {
      obj.applySnapshotChunk = ApplySnapshotChunkRequest.toJSON(message.applySnapshotChunk);
    }
    if (message.prepareProposal !== undefined) {
      obj.prepareProposal = PrepareProposalRequest.toJSON(message.prepareProposal);
    }
    if (message.processProposal !== undefined) {
      obj.processProposal = ProcessProposalRequest.toJSON(message.processProposal);
    }
    if (message.extendVote !== undefined) {
      obj.extendVote = ExtendVoteRequest.toJSON(message.extendVote);
    }
    if (message.verifyVoteExtension !== undefined) {
      obj.verifyVoteExtension = VerifyVoteExtensionRequest.toJSON(message.verifyVoteExtension);
    }
    if (message.finalizeBlock !== undefined) {
      obj.finalizeBlock = FinalizeBlockRequest.toJSON(message.finalizeBlock);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.echo = (object.echo !== undefined && object.echo !== null)
      ? EchoRequest.fromPartial(object.echo)
      : undefined;
    message.flush = (object.flush !== undefined && object.flush !== null)
      ? FlushRequest.fromPartial(object.flush)
      : undefined;
    message.info = (object.info !== undefined && object.info !== null)
      ? InfoRequest.fromPartial(object.info)
      : undefined;
    message.initChain = (object.initChain !== undefined && object.initChain !== null)
      ? InitChainRequest.fromPartial(object.initChain)
      : undefined;
    message.query = (object.query !== undefined && object.query !== null)
      ? QueryRequest.fromPartial(object.query)
      : undefined;
    message.checkTx = (object.checkTx !== undefined && object.checkTx !== null)
      ? CheckTxRequest.fromPartial(object.checkTx)
      : undefined;
    message.commit = (object.commit !== undefined && object.commit !== null)
      ? CommitRequest.fromPartial(object.commit)
      : undefined;
    message.listSnapshots = (object.listSnapshots !== undefined && object.listSnapshots !== null)
      ? ListSnapshotsRequest.fromPartial(object.listSnapshots)
      : undefined;
    message.offerSnapshot = (object.offerSnapshot !== undefined && object.offerSnapshot !== null)
      ? OfferSnapshotRequest.fromPartial(object.offerSnapshot)
      : undefined;
    message.loadSnapshotChunk = (object.loadSnapshotChunk !== undefined && object.loadSnapshotChunk !== null)
      ? LoadSnapshotChunkRequest.fromPartial(object.loadSnapshotChunk)
      : undefined;
    message.applySnapshotChunk = (object.applySnapshotChunk !== undefined && object.applySnapshotChunk !== null)
      ? ApplySnapshotChunkRequest.fromPartial(object.applySnapshotChunk)
      : undefined;
    message.prepareProposal = (object.prepareProposal !== undefined && object.prepareProposal !== null)
      ? PrepareProposalRequest.fromPartial(object.prepareProposal)
      : undefined;
    message.processProposal = (object.processProposal !== undefined && object.processProposal !== null)
      ? ProcessProposalRequest.fromPartial(object.processProposal)
      : undefined;
    message.extendVote = (object.extendVote !== undefined && object.extendVote !== null)
      ? ExtendVoteRequest.fromPartial(object.extendVote)
      : undefined;
    message.verifyVoteExtension = (object.verifyVoteExtension !== undefined && object.verifyVoteExtension !== null)
      ? VerifyVoteExtensionRequest.fromPartial(object.verifyVoteExtension)
      : undefined;
    message.finalizeBlock = (object.finalizeBlock !== undefined && object.finalizeBlock !== null)
      ? FinalizeBlockRequest.fromPartial(object.finalizeBlock)
      : undefined;
    return message;
  },
};

function createBaseEchoRequest(): EchoRequest {
  return { message: "" };
}

export const EchoRequest: MessageFns<EchoRequest> = {
  encode(message: EchoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EchoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEchoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EchoRequest {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: EchoRequest): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EchoRequest>, I>>(base?: I): EchoRequest {
    return EchoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EchoRequest>, I>>(object: I): EchoRequest {
    const message = createBaseEchoRequest();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseFlushRequest(): FlushRequest {
  return {};
}

export const FlushRequest: MessageFns<FlushRequest> = {
  encode(_: FlushRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlushRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlushRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FlushRequest {
    return {};
  },

  toJSON(_: FlushRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FlushRequest>, I>>(base?: I): FlushRequest {
    return FlushRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FlushRequest>, I>>(_: I): FlushRequest {
    const message = createBaseFlushRequest();
    return message;
  },
};

function createBaseInfoRequest(): InfoRequest {
  return { version: "", blockVersion: 0, p2pVersion: 0, abciVersion: "" };
}

export const InfoRequest: MessageFns<InfoRequest> = {
  encode(message: InfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.blockVersion !== 0) {
      writer.uint32(16).uint64(message.blockVersion);
    }
    if (message.p2pVersion !== 0) {
      writer.uint32(24).uint64(message.p2pVersion);
    }
    if (message.abciVersion !== "") {
      writer.uint32(34).string(message.abciVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockVersion = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.p2pVersion = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.abciVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InfoRequest {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      blockVersion: isSet(object.blockVersion) ? globalThis.Number(object.blockVersion) : 0,
      p2pVersion: isSet(object.p2pVersion) ? globalThis.Number(object.p2pVersion) : 0,
      abciVersion: isSet(object.abciVersion) ? globalThis.String(object.abciVersion) : "",
    };
  },

  toJSON(message: InfoRequest): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.blockVersion !== 0) {
      obj.blockVersion = Math.round(message.blockVersion);
    }
    if (message.p2pVersion !== 0) {
      obj.p2pVersion = Math.round(message.p2pVersion);
    }
    if (message.abciVersion !== "") {
      obj.abciVersion = message.abciVersion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InfoRequest>, I>>(base?: I): InfoRequest {
    return InfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InfoRequest>, I>>(object: I): InfoRequest {
    const message = createBaseInfoRequest();
    message.version = object.version ?? "";
    message.blockVersion = object.blockVersion ?? 0;
    message.p2pVersion = object.p2pVersion ?? 0;
    message.abciVersion = object.abciVersion ?? "";
    return message;
  },
};

function createBaseInitChainRequest(): InitChainRequest {
  return {
    time: undefined,
    chainId: "",
    consensusParams: undefined,
    validators: [],
    appStateBytes: new Uint8Array(0),
    initialHeight: 0,
  };
}

export const InitChainRequest: MessageFns<InitChainRequest> = {
  encode(message: InitChainRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(10).fork()).join();
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (message.consensusParams !== undefined) {
      ConsensusParams.encode(message.consensusParams, writer.uint32(26).fork()).join();
    }
    for (const v of message.validators) {
      ValidatorUpdate.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.appStateBytes.length !== 0) {
      writer.uint32(42).bytes(message.appStateBytes);
    }
    if (message.initialHeight !== 0) {
      writer.uint32(48).int64(message.initialHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitChainRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitChainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.consensusParams = ConsensusParams.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.validators.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.appStateBytes = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.initialHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitChainRequest {
    return {
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "",
      consensusParams: isSet(object.consensusParams) ? ConsensusParams.fromJSON(object.consensusParams) : undefined,
      validators: globalThis.Array.isArray(object?.validators)
        ? object.validators.map((e: any) => ValidatorUpdate.fromJSON(e))
        : [],
      appStateBytes: isSet(object.appStateBytes) ? bytesFromBase64(object.appStateBytes) : new Uint8Array(0),
      initialHeight: isSet(object.initialHeight) ? globalThis.Number(object.initialHeight) : 0,
    };
  },

  toJSON(message: InitChainRequest): unknown {
    const obj: any = {};
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.consensusParams !== undefined) {
      obj.consensusParams = ConsensusParams.toJSON(message.consensusParams);
    }
    if (message.validators?.length) {
      obj.validators = message.validators.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.appStateBytes.length !== 0) {
      obj.appStateBytes = base64FromBytes(message.appStateBytes);
    }
    if (message.initialHeight !== 0) {
      obj.initialHeight = Math.round(message.initialHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitChainRequest>, I>>(base?: I): InitChainRequest {
    return InitChainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitChainRequest>, I>>(object: I): InitChainRequest {
    const message = createBaseInitChainRequest();
    message.time = object.time ?? undefined;
    message.chainId = object.chainId ?? "";
    message.consensusParams = (object.consensusParams !== undefined && object.consensusParams !== null)
      ? ConsensusParams.fromPartial(object.consensusParams)
      : undefined;
    message.validators = object.validators?.map((e) => ValidatorUpdate.fromPartial(e)) || [];
    message.appStateBytes = object.appStateBytes ?? new Uint8Array(0);
    message.initialHeight = object.initialHeight ?? 0;
    return message;
  },
};

function createBaseQueryRequest(): QueryRequest {
  return { data: new Uint8Array(0), path: "", height: 0, prove: false };
}

export const QueryRequest: MessageFns<QueryRequest> = {
  encode(message: QueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.height !== 0) {
      writer.uint32(24).int64(message.height);
    }
    if (message.prove !== false) {
      writer.uint32(32).bool(message.prove);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.prove = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRequest {
    return {
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      prove: isSet(object.prove) ? globalThis.Boolean(object.prove) : false,
    };
  },

  toJSON(message: QueryRequest): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.prove !== false) {
      obj.prove = message.prove;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRequest>, I>>(base?: I): QueryRequest {
    return QueryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRequest>, I>>(object: I): QueryRequest {
    const message = createBaseQueryRequest();
    message.data = object.data ?? new Uint8Array(0);
    message.path = object.path ?? "";
    message.height = object.height ?? 0;
    message.prove = object.prove ?? false;
    return message;
  },
};

function createBaseCheckTxRequest(): CheckTxRequest {
  return { tx: new Uint8Array(0), type: 0 };
}

export const CheckTxRequest: MessageFns<CheckTxRequest> = {
  encode(message: CheckTxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tx.length !== 0) {
      writer.uint32(10).bytes(message.tx);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckTxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tx = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckTxRequest {
    return {
      tx: isSet(object.tx) ? bytesFromBase64(object.tx) : new Uint8Array(0),
      type: isSet(object.type) ? checkTxTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: CheckTxRequest): unknown {
    const obj: any = {};
    if (message.tx.length !== 0) {
      obj.tx = base64FromBytes(message.tx);
    }
    if (message.type !== 0) {
      obj.type = checkTxTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckTxRequest>, I>>(base?: I): CheckTxRequest {
    return CheckTxRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckTxRequest>, I>>(object: I): CheckTxRequest {
    const message = createBaseCheckTxRequest();
    message.tx = object.tx ?? new Uint8Array(0);
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseCommitRequest(): CommitRequest {
  return {};
}

export const CommitRequest: MessageFns<CommitRequest> = {
  encode(_: CommitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CommitRequest {
    return {};
  },

  toJSON(_: CommitRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CommitRequest>, I>>(base?: I): CommitRequest {
    return CommitRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommitRequest>, I>>(_: I): CommitRequest {
    const message = createBaseCommitRequest();
    return message;
  },
};

function createBaseListSnapshotsRequest(): ListSnapshotsRequest {
  return {};
}

export const ListSnapshotsRequest: MessageFns<ListSnapshotsRequest> = {
  encode(_: ListSnapshotsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSnapshotsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSnapshotsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListSnapshotsRequest {
    return {};
  },

  toJSON(_: ListSnapshotsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSnapshotsRequest>, I>>(base?: I): ListSnapshotsRequest {
    return ListSnapshotsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSnapshotsRequest>, I>>(_: I): ListSnapshotsRequest {
    const message = createBaseListSnapshotsRequest();
    return message;
  },
};

function createBaseOfferSnapshotRequest(): OfferSnapshotRequest {
  return { snapshot: undefined, appHash: new Uint8Array(0) };
}

export const OfferSnapshotRequest: MessageFns<OfferSnapshotRequest> = {
  encode(message: OfferSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snapshot !== undefined) {
      Snapshot.encode(message.snapshot, writer.uint32(10).fork()).join();
    }
    if (message.appHash.length !== 0) {
      writer.uint32(18).bytes(message.appHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfferSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfferSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snapshot = Snapshot.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.appHash = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfferSnapshotRequest {
    return {
      snapshot: isSet(object.snapshot) ? Snapshot.fromJSON(object.snapshot) : undefined,
      appHash: isSet(object.appHash) ? bytesFromBase64(object.appHash) : new Uint8Array(0),
    };
  },

  toJSON(message: OfferSnapshotRequest): unknown {
    const obj: any = {};
    if (message.snapshot !== undefined) {
      obj.snapshot = Snapshot.toJSON(message.snapshot);
    }
    if (message.appHash.length !== 0) {
      obj.appHash = base64FromBytes(message.appHash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OfferSnapshotRequest>, I>>(base?: I): OfferSnapshotRequest {
    return OfferSnapshotRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OfferSnapshotRequest>, I>>(object: I): OfferSnapshotRequest {
    const message = createBaseOfferSnapshotRequest();
    message.snapshot = (object.snapshot !== undefined && object.snapshot !== null)
      ? Snapshot.fromPartial(object.snapshot)
      : undefined;
    message.appHash = object.appHash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseLoadSnapshotChunkRequest(): LoadSnapshotChunkRequest {
  return { height: 0, format: 0, chunk: 0 };
}

export const LoadSnapshotChunkRequest: MessageFns<LoadSnapshotChunkRequest> = {
  encode(message: LoadSnapshotChunkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.height !== 0) {
      writer.uint32(8).uint64(message.height);
    }
    if (message.format !== 0) {
      writer.uint32(16).uint32(message.format);
    }
    if (message.chunk !== 0) {
      writer.uint32(24).uint32(message.chunk);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoadSnapshotChunkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoadSnapshotChunkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.height = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.format = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.chunk = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoadSnapshotChunkRequest {
    return {
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      format: isSet(object.format) ? globalThis.Number(object.format) : 0,
      chunk: isSet(object.chunk) ? globalThis.Number(object.chunk) : 0,
    };
  },

  toJSON(message: LoadSnapshotChunkRequest): unknown {
    const obj: any = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.format !== 0) {
      obj.format = Math.round(message.format);
    }
    if (message.chunk !== 0) {
      obj.chunk = Math.round(message.chunk);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoadSnapshotChunkRequest>, I>>(base?: I): LoadSnapshotChunkRequest {
    return LoadSnapshotChunkRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoadSnapshotChunkRequest>, I>>(object: I): LoadSnapshotChunkRequest {
    const message = createBaseLoadSnapshotChunkRequest();
    message.height = object.height ?? 0;
    message.format = object.format ?? 0;
    message.chunk = object.chunk ?? 0;
    return message;
  },
};

function createBaseApplySnapshotChunkRequest(): ApplySnapshotChunkRequest {
  return { index: 0, chunk: new Uint8Array(0), sender: "" };
}

export const ApplySnapshotChunkRequest: MessageFns<ApplySnapshotChunkRequest> = {
  encode(message: ApplySnapshotChunkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== 0) {
      writer.uint32(8).uint32(message.index);
    }
    if (message.chunk.length !== 0) {
      writer.uint32(18).bytes(message.chunk);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplySnapshotChunkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplySnapshotChunkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.index = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chunk = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplySnapshotChunkRequest {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      chunk: isSet(object.chunk) ? bytesFromBase64(object.chunk) : new Uint8Array(0),
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: ApplySnapshotChunkRequest): unknown {
    const obj: any = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.chunk.length !== 0) {
      obj.chunk = base64FromBytes(message.chunk);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplySnapshotChunkRequest>, I>>(base?: I): ApplySnapshotChunkRequest {
    return ApplySnapshotChunkRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplySnapshotChunkRequest>, I>>(object: I): ApplySnapshotChunkRequest {
    const message = createBaseApplySnapshotChunkRequest();
    message.index = object.index ?? 0;
    message.chunk = object.chunk ?? new Uint8Array(0);
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBasePrepareProposalRequest(): PrepareProposalRequest {
  return {
    maxTxBytes: 0,
    txs: [],
    localLastCommit: undefined,
    misbehavior: [],
    height: 0,
    time: undefined,
    nextValidatorsHash: new Uint8Array(0),
    proposerAddress: new Uint8Array(0),
  };
}

export const PrepareProposalRequest: MessageFns<PrepareProposalRequest> = {
  encode(message: PrepareProposalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxTxBytes !== 0) {
      writer.uint32(8).int64(message.maxTxBytes);
    }
    for (const v of message.txs) {
      writer.uint32(18).bytes(v!);
    }
    if (message.localLastCommit !== undefined) {
      ExtendedCommitInfo.encode(message.localLastCommit, writer.uint32(26).fork()).join();
    }
    for (const v of message.misbehavior) {
      Misbehavior.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.height !== 0) {
      writer.uint32(40).int64(message.height);
    }
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(50).fork()).join();
    }
    if (message.nextValidatorsHash.length !== 0) {
      writer.uint32(58).bytes(message.nextValidatorsHash);
    }
    if (message.proposerAddress.length !== 0) {
      writer.uint32(66).bytes(message.proposerAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrepareProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrepareProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.maxTxBytes = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.txs.push(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.localLastCommit = ExtendedCommitInfo.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.misbehavior.push(Misbehavior.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.height = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.nextValidatorsHash = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.proposerAddress = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrepareProposalRequest {
    return {
      maxTxBytes: isSet(object.maxTxBytes) ? globalThis.Number(object.maxTxBytes) : 0,
      txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => bytesFromBase64(e)) : [],
      localLastCommit: isSet(object.localLastCommit) ? ExtendedCommitInfo.fromJSON(object.localLastCommit) : undefined,
      misbehavior: globalThis.Array.isArray(object?.misbehavior)
        ? object.misbehavior.map((e: any) => Misbehavior.fromJSON(e))
        : [],
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      nextValidatorsHash: isSet(object.nextValidatorsHash)
        ? bytesFromBase64(object.nextValidatorsHash)
        : new Uint8Array(0),
      proposerAddress: isSet(object.proposerAddress) ? bytesFromBase64(object.proposerAddress) : new Uint8Array(0),
    };
  },

  toJSON(message: PrepareProposalRequest): unknown {
    const obj: any = {};
    if (message.maxTxBytes !== 0) {
      obj.maxTxBytes = Math.round(message.maxTxBytes);
    }
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => base64FromBytes(e));
    }
    if (message.localLastCommit !== undefined) {
      obj.localLastCommit = ExtendedCommitInfo.toJSON(message.localLastCommit);
    }
    if (message.misbehavior?.length) {
      obj.misbehavior = message.misbehavior.map((e) => Misbehavior.toJSON(e));
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.nextValidatorsHash.length !== 0) {
      obj.nextValidatorsHash = base64FromBytes(message.nextValidatorsHash);
    }
    if (message.proposerAddress.length !== 0) {
      obj.proposerAddress = base64FromBytes(message.proposerAddress);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrepareProposalRequest>, I>>(base?: I): PrepareProposalRequest {
    return PrepareProposalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrepareProposalRequest>, I>>(object: I): PrepareProposalRequest {
    const message = createBasePrepareProposalRequest();
    message.maxTxBytes = object.maxTxBytes ?? 0;
    message.txs = object.txs?.map((e) => e) || [];
    message.localLastCommit = (object.localLastCommit !== undefined && object.localLastCommit !== null)
      ? ExtendedCommitInfo.fromPartial(object.localLastCommit)
      : undefined;
    message.misbehavior = object.misbehavior?.map((e) => Misbehavior.fromPartial(e)) || [];
    message.height = object.height ?? 0;
    message.time = object.time ?? undefined;
    message.nextValidatorsHash = object.nextValidatorsHash ?? new Uint8Array(0);
    message.proposerAddress = object.proposerAddress ?? new Uint8Array(0);
    return message;
  },
};

function createBaseProcessProposalRequest(): ProcessProposalRequest {
  return {
    txs: [],
    proposedLastCommit: undefined,
    misbehavior: [],
    hash: new Uint8Array(0),
    height: 0,
    time: undefined,
    nextValidatorsHash: new Uint8Array(0),
    proposerAddress: new Uint8Array(0),
  };
}

export const ProcessProposalRequest: MessageFns<ProcessProposalRequest> = {
  encode(message: ProcessProposalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.txs) {
      writer.uint32(10).bytes(v!);
    }
    if (message.proposedLastCommit !== undefined) {
      CommitInfo.encode(message.proposedLastCommit, writer.uint32(18).fork()).join();
    }
    for (const v of message.misbehavior) {
      Misbehavior.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.hash.length !== 0) {
      writer.uint32(34).bytes(message.hash);
    }
    if (message.height !== 0) {
      writer.uint32(40).int64(message.height);
    }
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(50).fork()).join();
    }
    if (message.nextValidatorsHash.length !== 0) {
      writer.uint32(58).bytes(message.nextValidatorsHash);
    }
    if (message.proposerAddress.length !== 0) {
      writer.uint32(66).bytes(message.proposerAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txs.push(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.proposedLastCommit = CommitInfo.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.misbehavior.push(Misbehavior.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.height = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.nextValidatorsHash = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.proposerAddress = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessProposalRequest {
    return {
      txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => bytesFromBase64(e)) : [],
      proposedLastCommit: isSet(object.proposedLastCommit) ? CommitInfo.fromJSON(object.proposedLastCommit) : undefined,
      misbehavior: globalThis.Array.isArray(object?.misbehavior)
        ? object.misbehavior.map((e: any) => Misbehavior.fromJSON(e))
        : [],
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      nextValidatorsHash: isSet(object.nextValidatorsHash)
        ? bytesFromBase64(object.nextValidatorsHash)
        : new Uint8Array(0),
      proposerAddress: isSet(object.proposerAddress) ? bytesFromBase64(object.proposerAddress) : new Uint8Array(0),
    };
  },

  toJSON(message: ProcessProposalRequest): unknown {
    const obj: any = {};
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => base64FromBytes(e));
    }
    if (message.proposedLastCommit !== undefined) {
      obj.proposedLastCommit = CommitInfo.toJSON(message.proposedLastCommit);
    }
    if (message.misbehavior?.length) {
      obj.misbehavior = message.misbehavior.map((e) => Misbehavior.toJSON(e));
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.nextValidatorsHash.length !== 0) {
      obj.nextValidatorsHash = base64FromBytes(message.nextValidatorsHash);
    }
    if (message.proposerAddress.length !== 0) {
      obj.proposerAddress = base64FromBytes(message.proposerAddress);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessProposalRequest>, I>>(base?: I): ProcessProposalRequest {
    return ProcessProposalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessProposalRequest>, I>>(object: I): ProcessProposalRequest {
    const message = createBaseProcessProposalRequest();
    message.txs = object.txs?.map((e) => e) || [];
    message.proposedLastCommit = (object.proposedLastCommit !== undefined && object.proposedLastCommit !== null)
      ? CommitInfo.fromPartial(object.proposedLastCommit)
      : undefined;
    message.misbehavior = object.misbehavior?.map((e) => Misbehavior.fromPartial(e)) || [];
    message.hash = object.hash ?? new Uint8Array(0);
    message.height = object.height ?? 0;
    message.time = object.time ?? undefined;
    message.nextValidatorsHash = object.nextValidatorsHash ?? new Uint8Array(0);
    message.proposerAddress = object.proposerAddress ?? new Uint8Array(0);
    return message;
  },
};

function createBaseExtendVoteRequest(): ExtendVoteRequest {
  return {
    hash: new Uint8Array(0),
    height: 0,
    time: undefined,
    txs: [],
    proposedLastCommit: undefined,
    misbehavior: [],
    nextValidatorsHash: new Uint8Array(0),
    proposerAddress: new Uint8Array(0),
  };
}

export const ExtendVoteRequest: MessageFns<ExtendVoteRequest> = {
  encode(message: ExtendVoteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hash.length !== 0) {
      writer.uint32(10).bytes(message.hash);
    }
    if (message.height !== 0) {
      writer.uint32(16).int64(message.height);
    }
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(26).fork()).join();
    }
    for (const v of message.txs) {
      writer.uint32(34).bytes(v!);
    }
    if (message.proposedLastCommit !== undefined) {
      CommitInfo.encode(message.proposedLastCommit, writer.uint32(42).fork()).join();
    }
    for (const v of message.misbehavior) {
      Misbehavior.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.nextValidatorsHash.length !== 0) {
      writer.uint32(58).bytes(message.nextValidatorsHash);
    }
    if (message.proposerAddress.length !== 0) {
      writer.uint32(66).bytes(message.proposerAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtendVoteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtendVoteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.txs.push(reader.bytes());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.proposedLastCommit = CommitInfo.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.misbehavior.push(Misbehavior.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.nextValidatorsHash = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.proposerAddress = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtendVoteRequest {
    return {
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => bytesFromBase64(e)) : [],
      proposedLastCommit: isSet(object.proposedLastCommit) ? CommitInfo.fromJSON(object.proposedLastCommit) : undefined,
      misbehavior: globalThis.Array.isArray(object?.misbehavior)
        ? object.misbehavior.map((e: any) => Misbehavior.fromJSON(e))
        : [],
      nextValidatorsHash: isSet(object.nextValidatorsHash)
        ? bytesFromBase64(object.nextValidatorsHash)
        : new Uint8Array(0),
      proposerAddress: isSet(object.proposerAddress) ? bytesFromBase64(object.proposerAddress) : new Uint8Array(0),
    };
  },

  toJSON(message: ExtendVoteRequest): unknown {
    const obj: any = {};
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => base64FromBytes(e));
    }
    if (message.proposedLastCommit !== undefined) {
      obj.proposedLastCommit = CommitInfo.toJSON(message.proposedLastCommit);
    }
    if (message.misbehavior?.length) {
      obj.misbehavior = message.misbehavior.map((e) => Misbehavior.toJSON(e));
    }
    if (message.nextValidatorsHash.length !== 0) {
      obj.nextValidatorsHash = base64FromBytes(message.nextValidatorsHash);
    }
    if (message.proposerAddress.length !== 0) {
      obj.proposerAddress = base64FromBytes(message.proposerAddress);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtendVoteRequest>, I>>(base?: I): ExtendVoteRequest {
    return ExtendVoteRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtendVoteRequest>, I>>(object: I): ExtendVoteRequest {
    const message = createBaseExtendVoteRequest();
    message.hash = object.hash ?? new Uint8Array(0);
    message.height = object.height ?? 0;
    message.time = object.time ?? undefined;
    message.txs = object.txs?.map((e) => e) || [];
    message.proposedLastCommit = (object.proposedLastCommit !== undefined && object.proposedLastCommit !== null)
      ? CommitInfo.fromPartial(object.proposedLastCommit)
      : undefined;
    message.misbehavior = object.misbehavior?.map((e) => Misbehavior.fromPartial(e)) || [];
    message.nextValidatorsHash = object.nextValidatorsHash ?? new Uint8Array(0);
    message.proposerAddress = object.proposerAddress ?? new Uint8Array(0);
    return message;
  },
};

function createBaseVerifyVoteExtensionRequest(): VerifyVoteExtensionRequest {
  return {
    hash: new Uint8Array(0),
    validatorAddress: new Uint8Array(0),
    height: 0,
    voteExtension: new Uint8Array(0),
    nonRpVoteExtension: new Uint8Array(0),
  };
}

export const VerifyVoteExtensionRequest: MessageFns<VerifyVoteExtensionRequest> = {
  encode(message: VerifyVoteExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hash.length !== 0) {
      writer.uint32(10).bytes(message.hash);
    }
    if (message.validatorAddress.length !== 0) {
      writer.uint32(18).bytes(message.validatorAddress);
    }
    if (message.height !== 0) {
      writer.uint32(24).int64(message.height);
    }
    if (message.voteExtension.length !== 0) {
      writer.uint32(34).bytes(message.voteExtension);
    }
    if (message.nonRpVoteExtension.length !== 0) {
      writer.uint32(42).bytes(message.nonRpVoteExtension);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyVoteExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyVoteExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validatorAddress = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.voteExtension = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nonRpVoteExtension = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyVoteExtensionRequest {
    return {
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
      validatorAddress: isSet(object.validatorAddress) ? bytesFromBase64(object.validatorAddress) : new Uint8Array(0),
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      voteExtension: isSet(object.voteExtension) ? bytesFromBase64(object.voteExtension) : new Uint8Array(0),
      nonRpVoteExtension: isSet(object.nonRpVoteExtension)
        ? bytesFromBase64(object.nonRpVoteExtension)
        : new Uint8Array(0),
    };
  },

  toJSON(message: VerifyVoteExtensionRequest): unknown {
    const obj: any = {};
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.validatorAddress.length !== 0) {
      obj.validatorAddress = base64FromBytes(message.validatorAddress);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.voteExtension.length !== 0) {
      obj.voteExtension = base64FromBytes(message.voteExtension);
    }
    if (message.nonRpVoteExtension.length !== 0) {
      obj.nonRpVoteExtension = base64FromBytes(message.nonRpVoteExtension);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyVoteExtensionRequest>, I>>(base?: I): VerifyVoteExtensionRequest {
    return VerifyVoteExtensionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyVoteExtensionRequest>, I>>(object: I): VerifyVoteExtensionRequest {
    const message = createBaseVerifyVoteExtensionRequest();
    message.hash = object.hash ?? new Uint8Array(0);
    message.validatorAddress = object.validatorAddress ?? new Uint8Array(0);
    message.height = object.height ?? 0;
    message.voteExtension = object.voteExtension ?? new Uint8Array(0);
    message.nonRpVoteExtension = object.nonRpVoteExtension ?? new Uint8Array(0);
    return message;
  },
};

function createBaseFinalizeBlockRequest(): FinalizeBlockRequest {
  return {
    txs: [],
    decidedLastCommit: undefined,
    misbehavior: [],
    hash: new Uint8Array(0),
    height: 0,
    time: undefined,
    nextValidatorsHash: new Uint8Array(0),
    proposerAddress: new Uint8Array(0),
    syncingToHeight: 0,
  };
}

export const FinalizeBlockRequest: MessageFns<FinalizeBlockRequest> = {
  encode(message: FinalizeBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.txs) {
      writer.uint32(10).bytes(v!);
    }
    if (message.decidedLastCommit !== undefined) {
      CommitInfo.encode(message.decidedLastCommit, writer.uint32(18).fork()).join();
    }
    for (const v of message.misbehavior) {
      Misbehavior.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.hash.length !== 0) {
      writer.uint32(34).bytes(message.hash);
    }
    if (message.height !== 0) {
      writer.uint32(40).int64(message.height);
    }
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(50).fork()).join();
    }
    if (message.nextValidatorsHash.length !== 0) {
      writer.uint32(58).bytes(message.nextValidatorsHash);
    }
    if (message.proposerAddress.length !== 0) {
      writer.uint32(66).bytes(message.proposerAddress);
    }
    if (message.syncingToHeight !== 0) {
      writer.uint32(72).int64(message.syncingToHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FinalizeBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinalizeBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txs.push(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.decidedLastCommit = CommitInfo.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.misbehavior.push(Misbehavior.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.height = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.nextValidatorsHash = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.proposerAddress = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.syncingToHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinalizeBlockRequest {
    return {
      txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => bytesFromBase64(e)) : [],
      decidedLastCommit: isSet(object.decidedLastCommit) ? CommitInfo.fromJSON(object.decidedLastCommit) : undefined,
      misbehavior: globalThis.Array.isArray(object?.misbehavior)
        ? object.misbehavior.map((e: any) => Misbehavior.fromJSON(e))
        : [],
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      nextValidatorsHash: isSet(object.nextValidatorsHash)
        ? bytesFromBase64(object.nextValidatorsHash)
        : new Uint8Array(0),
      proposerAddress: isSet(object.proposerAddress) ? bytesFromBase64(object.proposerAddress) : new Uint8Array(0),
      syncingToHeight: isSet(object.syncingToHeight) ? globalThis.Number(object.syncingToHeight) : 0,
    };
  },

  toJSON(message: FinalizeBlockRequest): unknown {
    const obj: any = {};
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => base64FromBytes(e));
    }
    if (message.decidedLastCommit !== undefined) {
      obj.decidedLastCommit = CommitInfo.toJSON(message.decidedLastCommit);
    }
    if (message.misbehavior?.length) {
      obj.misbehavior = message.misbehavior.map((e) => Misbehavior.toJSON(e));
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.nextValidatorsHash.length !== 0) {
      obj.nextValidatorsHash = base64FromBytes(message.nextValidatorsHash);
    }
    if (message.proposerAddress.length !== 0) {
      obj.proposerAddress = base64FromBytes(message.proposerAddress);
    }
    if (message.syncingToHeight !== 0) {
      obj.syncingToHeight = Math.round(message.syncingToHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FinalizeBlockRequest>, I>>(base?: I): FinalizeBlockRequest {
    return FinalizeBlockRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FinalizeBlockRequest>, I>>(object: I): FinalizeBlockRequest {
    const message = createBaseFinalizeBlockRequest();
    message.txs = object.txs?.map((e) => e) || [];
    message.decidedLastCommit = (object.decidedLastCommit !== undefined && object.decidedLastCommit !== null)
      ? CommitInfo.fromPartial(object.decidedLastCommit)
      : undefined;
    message.misbehavior = object.misbehavior?.map((e) => Misbehavior.fromPartial(e)) || [];
    message.hash = object.hash ?? new Uint8Array(0);
    message.height = object.height ?? 0;
    message.time = object.time ?? undefined;
    message.nextValidatorsHash = object.nextValidatorsHash ?? new Uint8Array(0);
    message.proposerAddress = object.proposerAddress ?? new Uint8Array(0);
    message.syncingToHeight = object.syncingToHeight ?? 0;
    return message;
  },
};

function createBaseResponse(): Response {
  return {
    exception: undefined,
    echo: undefined,
    flush: undefined,
    info: undefined,
    initChain: undefined,
    query: undefined,
    checkTx: undefined,
    commit: undefined,
    listSnapshots: undefined,
    offerSnapshot: undefined,
    loadSnapshotChunk: undefined,
    applySnapshotChunk: undefined,
    prepareProposal: undefined,
    processProposal: undefined,
    extendVote: undefined,
    verifyVoteExtension: undefined,
    finalizeBlock: undefined,
  };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.exception !== undefined) {
      ExceptionResponse.encode(message.exception, writer.uint32(10).fork()).join();
    }
    if (message.echo !== undefined) {
      EchoResponse.encode(message.echo, writer.uint32(18).fork()).join();
    }
    if (message.flush !== undefined) {
      FlushResponse.encode(message.flush, writer.uint32(26).fork()).join();
    }
    if (message.info !== undefined) {
      InfoResponse.encode(message.info, writer.uint32(34).fork()).join();
    }
    if (message.initChain !== undefined) {
      InitChainResponse.encode(message.initChain, writer.uint32(50).fork()).join();
    }
    if (message.query !== undefined) {
      QueryResponse.encode(message.query, writer.uint32(58).fork()).join();
    }
    if (message.checkTx !== undefined) {
      CheckTxResponse.encode(message.checkTx, writer.uint32(74).fork()).join();
    }
    if (message.commit !== undefined) {
      CommitResponse.encode(message.commit, writer.uint32(98).fork()).join();
    }
    if (message.listSnapshots !== undefined) {
      ListSnapshotsResponse.encode(message.listSnapshots, writer.uint32(106).fork()).join();
    }
    if (message.offerSnapshot !== undefined) {
      OfferSnapshotResponse.encode(message.offerSnapshot, writer.uint32(114).fork()).join();
    }
    if (message.loadSnapshotChunk !== undefined) {
      LoadSnapshotChunkResponse.encode(message.loadSnapshotChunk, writer.uint32(122).fork()).join();
    }
    if (message.applySnapshotChunk !== undefined) {
      ApplySnapshotChunkResponse.encode(message.applySnapshotChunk, writer.uint32(130).fork()).join();
    }
    if (message.prepareProposal !== undefined) {
      PrepareProposalResponse.encode(message.prepareProposal, writer.uint32(138).fork()).join();
    }
    if (message.processProposal !== undefined) {
      ProcessProposalResponse.encode(message.processProposal, writer.uint32(146).fork()).join();
    }
    if (message.extendVote !== undefined) {
      ExtendVoteResponse.encode(message.extendVote, writer.uint32(154).fork()).join();
    }
    if (message.verifyVoteExtension !== undefined) {
      VerifyVoteExtensionResponse.encode(message.verifyVoteExtension, writer.uint32(162).fork()).join();
    }
    if (message.finalizeBlock !== undefined) {
      FinalizeBlockResponse.encode(message.finalizeBlock, writer.uint32(170).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.exception = ExceptionResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.echo = EchoResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.flush = FlushResponse.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.info = InfoResponse.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.initChain = InitChainResponse.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.query = QueryResponse.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.checkTx = CheckTxResponse.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.commit = CommitResponse.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.listSnapshots = ListSnapshotsResponse.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.offerSnapshot = OfferSnapshotResponse.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.loadSnapshotChunk = LoadSnapshotChunkResponse.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.applySnapshotChunk = ApplySnapshotChunkResponse.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.prepareProposal = PrepareProposalResponse.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.processProposal = ProcessProposalResponse.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.extendVote = ExtendVoteResponse.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.verifyVoteExtension = VerifyVoteExtensionResponse.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.finalizeBlock = FinalizeBlockResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      exception: isSet(object.exception) ? ExceptionResponse.fromJSON(object.exception) : undefined,
      echo: isSet(object.echo) ? EchoResponse.fromJSON(object.echo) : undefined,
      flush: isSet(object.flush) ? FlushResponse.fromJSON(object.flush) : undefined,
      info: isSet(object.info) ? InfoResponse.fromJSON(object.info) : undefined,
      initChain: isSet(object.initChain) ? InitChainResponse.fromJSON(object.initChain) : undefined,
      query: isSet(object.query) ? QueryResponse.fromJSON(object.query) : undefined,
      checkTx: isSet(object.checkTx) ? CheckTxResponse.fromJSON(object.checkTx) : undefined,
      commit: isSet(object.commit) ? CommitResponse.fromJSON(object.commit) : undefined,
      listSnapshots: isSet(object.listSnapshots) ? ListSnapshotsResponse.fromJSON(object.listSnapshots) : undefined,
      offerSnapshot: isSet(object.offerSnapshot) ? OfferSnapshotResponse.fromJSON(object.offerSnapshot) : undefined,
      loadSnapshotChunk: isSet(object.loadSnapshotChunk)
        ? LoadSnapshotChunkResponse.fromJSON(object.loadSnapshotChunk)
        : undefined,
      applySnapshotChunk: isSet(object.applySnapshotChunk)
        ? ApplySnapshotChunkResponse.fromJSON(object.applySnapshotChunk)
        : undefined,
      prepareProposal: isSet(object.prepareProposal)
        ? PrepareProposalResponse.fromJSON(object.prepareProposal)
        : undefined,
      processProposal: isSet(object.processProposal)
        ? ProcessProposalResponse.fromJSON(object.processProposal)
        : undefined,
      extendVote: isSet(object.extendVote) ? ExtendVoteResponse.fromJSON(object.extendVote) : undefined,
      verifyVoteExtension: isSet(object.verifyVoteExtension)
        ? VerifyVoteExtensionResponse.fromJSON(object.verifyVoteExtension)
        : undefined,
      finalizeBlock: isSet(object.finalizeBlock) ? FinalizeBlockResponse.fromJSON(object.finalizeBlock) : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.exception !== undefined) {
      obj.exception = ExceptionResponse.toJSON(message.exception);
    }
    if (message.echo !== undefined) {
      obj.echo = EchoResponse.toJSON(message.echo);
    }
    if (message.flush !== undefined) {
      obj.flush = FlushResponse.toJSON(message.flush);
    }
    if (message.info !== undefined) {
      obj.info = InfoResponse.toJSON(message.info);
    }
    if (message.initChain !== undefined) {
      obj.initChain = InitChainResponse.toJSON(message.initChain);
    }
    if (message.query !== undefined) {
      obj.query = QueryResponse.toJSON(message.query);
    }
    if (message.checkTx !== undefined) {
      obj.checkTx = CheckTxResponse.toJSON(message.checkTx);
    }
    if (message.commit !== undefined) {
      obj.commit = CommitResponse.toJSON(message.commit);
    }
    if (message.listSnapshots !== undefined) {
      obj.listSnapshots = ListSnapshotsResponse.toJSON(message.listSnapshots);
    }
    if (message.offerSnapshot !== undefined) {
      obj.offerSnapshot = OfferSnapshotResponse.toJSON(message.offerSnapshot);
    }
    if (message.loadSnapshotChunk !== undefined) {
      obj.loadSnapshotChunk = LoadSnapshotChunkResponse.toJSON(message.loadSnapshotChunk);
    }
    if (message.applySnapshotChunk !== undefined) {
      obj.applySnapshotChunk = ApplySnapshotChunkResponse.toJSON(message.applySnapshotChunk);
    }
    if (message.prepareProposal !== undefined) {
      obj.prepareProposal = PrepareProposalResponse.toJSON(message.prepareProposal);
    }
    if (message.processProposal !== undefined) {
      obj.processProposal = ProcessProposalResponse.toJSON(message.processProposal);
    }
    if (message.extendVote !== undefined) {
      obj.extendVote = ExtendVoteResponse.toJSON(message.extendVote);
    }
    if (message.verifyVoteExtension !== undefined) {
      obj.verifyVoteExtension = VerifyVoteExtensionResponse.toJSON(message.verifyVoteExtension);
    }
    if (message.finalizeBlock !== undefined) {
      obj.finalizeBlock = FinalizeBlockResponse.toJSON(message.finalizeBlock);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.exception = (object.exception !== undefined && object.exception !== null)
      ? ExceptionResponse.fromPartial(object.exception)
      : undefined;
    message.echo = (object.echo !== undefined && object.echo !== null)
      ? EchoResponse.fromPartial(object.echo)
      : undefined;
    message.flush = (object.flush !== undefined && object.flush !== null)
      ? FlushResponse.fromPartial(object.flush)
      : undefined;
    message.info = (object.info !== undefined && object.info !== null)
      ? InfoResponse.fromPartial(object.info)
      : undefined;
    message.initChain = (object.initChain !== undefined && object.initChain !== null)
      ? InitChainResponse.fromPartial(object.initChain)
      : undefined;
    message.query = (object.query !== undefined && object.query !== null)
      ? QueryResponse.fromPartial(object.query)
      : undefined;
    message.checkTx = (object.checkTx !== undefined && object.checkTx !== null)
      ? CheckTxResponse.fromPartial(object.checkTx)
      : undefined;
    message.commit = (object.commit !== undefined && object.commit !== null)
      ? CommitResponse.fromPartial(object.commit)
      : undefined;
    message.listSnapshots = (object.listSnapshots !== undefined && object.listSnapshots !== null)
      ? ListSnapshotsResponse.fromPartial(object.listSnapshots)
      : undefined;
    message.offerSnapshot = (object.offerSnapshot !== undefined && object.offerSnapshot !== null)
      ? OfferSnapshotResponse.fromPartial(object.offerSnapshot)
      : undefined;
    message.loadSnapshotChunk = (object.loadSnapshotChunk !== undefined && object.loadSnapshotChunk !== null)
      ? LoadSnapshotChunkResponse.fromPartial(object.loadSnapshotChunk)
      : undefined;
    message.applySnapshotChunk = (object.applySnapshotChunk !== undefined && object.applySnapshotChunk !== null)
      ? ApplySnapshotChunkResponse.fromPartial(object.applySnapshotChunk)
      : undefined;
    message.prepareProposal = (object.prepareProposal !== undefined && object.prepareProposal !== null)
      ? PrepareProposalResponse.fromPartial(object.prepareProposal)
      : undefined;
    message.processProposal = (object.processProposal !== undefined && object.processProposal !== null)
      ? ProcessProposalResponse.fromPartial(object.processProposal)
      : undefined;
    message.extendVote = (object.extendVote !== undefined && object.extendVote !== null)
      ? ExtendVoteResponse.fromPartial(object.extendVote)
      : undefined;
    message.verifyVoteExtension = (object.verifyVoteExtension !== undefined && object.verifyVoteExtension !== null)
      ? VerifyVoteExtensionResponse.fromPartial(object.verifyVoteExtension)
      : undefined;
    message.finalizeBlock = (object.finalizeBlock !== undefined && object.finalizeBlock !== null)
      ? FinalizeBlockResponse.fromPartial(object.finalizeBlock)
      : undefined;
    return message;
  },
};

function createBaseExceptionResponse(): ExceptionResponse {
  return { error: "" };
}

export const ExceptionResponse: MessageFns<ExceptionResponse> = {
  encode(message: ExceptionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExceptionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExceptionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExceptionResponse {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: ExceptionResponse): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExceptionResponse>, I>>(base?: I): ExceptionResponse {
    return ExceptionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExceptionResponse>, I>>(object: I): ExceptionResponse {
    const message = createBaseExceptionResponse();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseEchoResponse(): EchoResponse {
  return { message: "" };
}

export const EchoResponse: MessageFns<EchoResponse> = {
  encode(message: EchoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EchoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEchoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EchoResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: EchoResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EchoResponse>, I>>(base?: I): EchoResponse {
    return EchoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EchoResponse>, I>>(object: I): EchoResponse {
    const message = createBaseEchoResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseFlushResponse(): FlushResponse {
  return {};
}

export const FlushResponse: MessageFns<FlushResponse> = {
  encode(_: FlushResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlushResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlushResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FlushResponse {
    return {};
  },

  toJSON(_: FlushResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FlushResponse>, I>>(base?: I): FlushResponse {
    return FlushResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FlushResponse>, I>>(_: I): FlushResponse {
    const message = createBaseFlushResponse();
    return message;
  },
};

function createBaseInfoResponse(): InfoResponse {
  return {
    data: "",
    version: "",
    appVersion: 0,
    lastBlockHeight: 0,
    lastBlockAppHash: new Uint8Array(0),
    lanePriorities: {},
    defaultLane: "",
  };
}

export const InfoResponse: MessageFns<InfoResponse> = {
  encode(message: InfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.appVersion !== 0) {
      writer.uint32(24).uint64(message.appVersion);
    }
    if (message.lastBlockHeight !== 0) {
      writer.uint32(32).int64(message.lastBlockHeight);
    }
    if (message.lastBlockAppHash.length !== 0) {
      writer.uint32(42).bytes(message.lastBlockAppHash);
    }
    Object.entries(message.lanePriorities).forEach(([key, value]) => {
      InfoResponse_LanePrioritiesEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.defaultLane !== "") {
      writer.uint32(58).string(message.defaultLane);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.appVersion = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.lastBlockHeight = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.lastBlockAppHash = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = InfoResponse_LanePrioritiesEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.lanePriorities[entry6.key] = entry6.value;
          }
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.defaultLane = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InfoResponse {
    return {
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      appVersion: isSet(object.appVersion) ? globalThis.Number(object.appVersion) : 0,
      lastBlockHeight: isSet(object.lastBlockHeight) ? globalThis.Number(object.lastBlockHeight) : 0,
      lastBlockAppHash: isSet(object.lastBlockAppHash) ? bytesFromBase64(object.lastBlockAppHash) : new Uint8Array(0),
      lanePriorities: isObject(object.lanePriorities)
        ? Object.entries(object.lanePriorities).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      defaultLane: isSet(object.defaultLane) ? globalThis.String(object.defaultLane) : "",
    };
  },

  toJSON(message: InfoResponse): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.appVersion !== 0) {
      obj.appVersion = Math.round(message.appVersion);
    }
    if (message.lastBlockHeight !== 0) {
      obj.lastBlockHeight = Math.round(message.lastBlockHeight);
    }
    if (message.lastBlockAppHash.length !== 0) {
      obj.lastBlockAppHash = base64FromBytes(message.lastBlockAppHash);
    }
    if (message.lanePriorities) {
      const entries = Object.entries(message.lanePriorities);
      if (entries.length > 0) {
        obj.lanePriorities = {};
        entries.forEach(([k, v]) => {
          obj.lanePriorities[k] = Math.round(v);
        });
      }
    }
    if (message.defaultLane !== "") {
      obj.defaultLane = message.defaultLane;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InfoResponse>, I>>(base?: I): InfoResponse {
    return InfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InfoResponse>, I>>(object: I): InfoResponse {
    const message = createBaseInfoResponse();
    message.data = object.data ?? "";
    message.version = object.version ?? "";
    message.appVersion = object.appVersion ?? 0;
    message.lastBlockHeight = object.lastBlockHeight ?? 0;
    message.lastBlockAppHash = object.lastBlockAppHash ?? new Uint8Array(0);
    message.lanePriorities = Object.entries(object.lanePriorities ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.defaultLane = object.defaultLane ?? "";
    return message;
  },
};

function createBaseInfoResponse_LanePrioritiesEntry(): InfoResponse_LanePrioritiesEntry {
  return { key: "", value: 0 };
}

export const InfoResponse_LanePrioritiesEntry: MessageFns<InfoResponse_LanePrioritiesEntry> = {
  encode(message: InfoResponse_LanePrioritiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).uint32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InfoResponse_LanePrioritiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInfoResponse_LanePrioritiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InfoResponse_LanePrioritiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: InfoResponse_LanePrioritiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InfoResponse_LanePrioritiesEntry>, I>>(
    base?: I,
  ): InfoResponse_LanePrioritiesEntry {
    return InfoResponse_LanePrioritiesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InfoResponse_LanePrioritiesEntry>, I>>(
    object: I,
  ): InfoResponse_LanePrioritiesEntry {
    const message = createBaseInfoResponse_LanePrioritiesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseInitChainResponse(): InitChainResponse {
  return { consensusParams: undefined, validators: [], appHash: new Uint8Array(0) };
}

export const InitChainResponse: MessageFns<InitChainResponse> = {
  encode(message: InitChainResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consensusParams !== undefined) {
      ConsensusParams.encode(message.consensusParams, writer.uint32(10).fork()).join();
    }
    for (const v of message.validators) {
      ValidatorUpdate.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.appHash.length !== 0) {
      writer.uint32(26).bytes(message.appHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitChainResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitChainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consensusParams = ConsensusParams.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validators.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.appHash = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitChainResponse {
    return {
      consensusParams: isSet(object.consensusParams) ? ConsensusParams.fromJSON(object.consensusParams) : undefined,
      validators: globalThis.Array.isArray(object?.validators)
        ? object.validators.map((e: any) => ValidatorUpdate.fromJSON(e))
        : [],
      appHash: isSet(object.appHash) ? bytesFromBase64(object.appHash) : new Uint8Array(0),
    };
  },

  toJSON(message: InitChainResponse): unknown {
    const obj: any = {};
    if (message.consensusParams !== undefined) {
      obj.consensusParams = ConsensusParams.toJSON(message.consensusParams);
    }
    if (message.validators?.length) {
      obj.validators = message.validators.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.appHash.length !== 0) {
      obj.appHash = base64FromBytes(message.appHash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitChainResponse>, I>>(base?: I): InitChainResponse {
    return InitChainResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitChainResponse>, I>>(object: I): InitChainResponse {
    const message = createBaseInitChainResponse();
    message.consensusParams = (object.consensusParams !== undefined && object.consensusParams !== null)
      ? ConsensusParams.fromPartial(object.consensusParams)
      : undefined;
    message.validators = object.validators?.map((e) => ValidatorUpdate.fromPartial(e)) || [];
    message.appHash = object.appHash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryResponse(): QueryResponse {
  return {
    code: 0,
    log: "",
    info: "",
    index: 0,
    key: new Uint8Array(0),
    value: new Uint8Array(0),
    proofOps: undefined,
    height: 0,
    codespace: "",
  };
}

export const QueryResponse: MessageFns<QueryResponse> = {
  encode(message: QueryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    if (message.log !== "") {
      writer.uint32(26).string(message.log);
    }
    if (message.info !== "") {
      writer.uint32(34).string(message.info);
    }
    if (message.index !== 0) {
      writer.uint32(40).int64(message.index);
    }
    if (message.key.length !== 0) {
      writer.uint32(50).bytes(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(58).bytes(message.value);
    }
    if (message.proofOps !== undefined) {
      ProofOps.encode(message.proofOps, writer.uint32(66).fork()).join();
    }
    if (message.height !== 0) {
      writer.uint32(72).int64(message.height);
    }
    if (message.codespace !== "") {
      writer.uint32(82).string(message.codespace);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.log = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.info = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.index = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.key = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.proofOps = ProofOps.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.height = longToNumber(reader.int64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.codespace = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      log: isSet(object.log) ? globalThis.String(object.log) : "",
      info: isSet(object.info) ? globalThis.String(object.info) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
      proofOps: isSet(object.proofOps) ? ProofOps.fromJSON(object.proofOps) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      codespace: isSet(object.codespace) ? globalThis.String(object.codespace) : "",
    };
  },

  toJSON(message: QueryResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.log !== "") {
      obj.log = message.log;
    }
    if (message.info !== "") {
      obj.info = message.info;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.key.length !== 0) {
      obj.key = base64FromBytes(message.key);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    if (message.proofOps !== undefined) {
      obj.proofOps = ProofOps.toJSON(message.proofOps);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.codespace !== "") {
      obj.codespace = message.codespace;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryResponse>, I>>(base?: I): QueryResponse {
    return QueryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryResponse>, I>>(object: I): QueryResponse {
    const message = createBaseQueryResponse();
    message.code = object.code ?? 0;
    message.log = object.log ?? "";
    message.info = object.info ?? "";
    message.index = object.index ?? 0;
    message.key = object.key ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    message.proofOps = (object.proofOps !== undefined && object.proofOps !== null)
      ? ProofOps.fromPartial(object.proofOps)
      : undefined;
    message.height = object.height ?? 0;
    message.codespace = object.codespace ?? "";
    return message;
  },
};

function createBaseCheckTxResponse(): CheckTxResponse {
  return {
    code: 0,
    data: new Uint8Array(0),
    log: "",
    info: "",
    gasWanted: 0,
    gasUsed: 0,
    events: [],
    codespace: "",
    laneId: "",
  };
}

export const CheckTxResponse: MessageFns<CheckTxResponse> = {
  encode(message: CheckTxResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    if (message.log !== "") {
      writer.uint32(26).string(message.log);
    }
    if (message.info !== "") {
      writer.uint32(34).string(message.info);
    }
    if (message.gasWanted !== 0) {
      writer.uint32(40).int64(message.gasWanted);
    }
    if (message.gasUsed !== 0) {
      writer.uint32(48).int64(message.gasUsed);
    }
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.codespace !== "") {
      writer.uint32(66).string(message.codespace);
    }
    if (message.laneId !== "") {
      writer.uint32(98).string(message.laneId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckTxResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckTxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.log = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.info = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.gasWanted = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.gasUsed = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.codespace = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.laneId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckTxResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      log: isSet(object.log) ? globalThis.String(object.log) : "",
      info: isSet(object.info) ? globalThis.String(object.info) : "",
      gasWanted: isSet(object.gas_wanted) ? globalThis.Number(object.gas_wanted) : 0,
      gasUsed: isSet(object.gas_used) ? globalThis.Number(object.gas_used) : 0,
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
      codespace: isSet(object.codespace) ? globalThis.String(object.codespace) : "",
      laneId: isSet(object.laneId) ? globalThis.String(object.laneId) : "",
    };
  },

  toJSON(message: CheckTxResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.log !== "") {
      obj.log = message.log;
    }
    if (message.info !== "") {
      obj.info = message.info;
    }
    if (message.gasWanted !== 0) {
      obj.gas_wanted = Math.round(message.gasWanted);
    }
    if (message.gasUsed !== 0) {
      obj.gas_used = Math.round(message.gasUsed);
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    if (message.codespace !== "") {
      obj.codespace = message.codespace;
    }
    if (message.laneId !== "") {
      obj.laneId = message.laneId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckTxResponse>, I>>(base?: I): CheckTxResponse {
    return CheckTxResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckTxResponse>, I>>(object: I): CheckTxResponse {
    const message = createBaseCheckTxResponse();
    message.code = object.code ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    message.log = object.log ?? "";
    message.info = object.info ?? "";
    message.gasWanted = object.gasWanted ?? 0;
    message.gasUsed = object.gasUsed ?? 0;
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    message.codespace = object.codespace ?? "";
    message.laneId = object.laneId ?? "";
    return message;
  },
};

function createBaseCommitResponse(): CommitResponse {
  return { retainHeight: 0 };
}

export const CommitResponse: MessageFns<CommitResponse> = {
  encode(message: CommitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.retainHeight !== 0) {
      writer.uint32(24).int64(message.retainHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.retainHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommitResponse {
    return { retainHeight: isSet(object.retainHeight) ? globalThis.Number(object.retainHeight) : 0 };
  },

  toJSON(message: CommitResponse): unknown {
    const obj: any = {};
    if (message.retainHeight !== 0) {
      obj.retainHeight = Math.round(message.retainHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommitResponse>, I>>(base?: I): CommitResponse {
    return CommitResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommitResponse>, I>>(object: I): CommitResponse {
    const message = createBaseCommitResponse();
    message.retainHeight = object.retainHeight ?? 0;
    return message;
  },
};

function createBaseListSnapshotsResponse(): ListSnapshotsResponse {
  return { snapshots: [] };
}

export const ListSnapshotsResponse: MessageFns<ListSnapshotsResponse> = {
  encode(message: ListSnapshotsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.snapshots) {
      Snapshot.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSnapshotsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSnapshotsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snapshots.push(Snapshot.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSnapshotsResponse {
    return {
      snapshots: globalThis.Array.isArray(object?.snapshots)
        ? object.snapshots.map((e: any) => Snapshot.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListSnapshotsResponse): unknown {
    const obj: any = {};
    if (message.snapshots?.length) {
      obj.snapshots = message.snapshots.map((e) => Snapshot.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSnapshotsResponse>, I>>(base?: I): ListSnapshotsResponse {
    return ListSnapshotsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSnapshotsResponse>, I>>(object: I): ListSnapshotsResponse {
    const message = createBaseListSnapshotsResponse();
    message.snapshots = object.snapshots?.map((e) => Snapshot.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOfferSnapshotResponse(): OfferSnapshotResponse {
  return { result: 0 };
}

export const OfferSnapshotResponse: MessageFns<OfferSnapshotResponse> = {
  encode(message: OfferSnapshotResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== 0) {
      writer.uint32(8).int32(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfferSnapshotResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfferSnapshotResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfferSnapshotResponse {
    return { result: isSet(object.result) ? offerSnapshotResultFromJSON(object.result) : 0 };
  },

  toJSON(message: OfferSnapshotResponse): unknown {
    const obj: any = {};
    if (message.result !== 0) {
      obj.result = offerSnapshotResultToJSON(message.result);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OfferSnapshotResponse>, I>>(base?: I): OfferSnapshotResponse {
    return OfferSnapshotResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OfferSnapshotResponse>, I>>(object: I): OfferSnapshotResponse {
    const message = createBaseOfferSnapshotResponse();
    message.result = object.result ?? 0;
    return message;
  },
};

function createBaseLoadSnapshotChunkResponse(): LoadSnapshotChunkResponse {
  return { chunk: new Uint8Array(0) };
}

export const LoadSnapshotChunkResponse: MessageFns<LoadSnapshotChunkResponse> = {
  encode(message: LoadSnapshotChunkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chunk.length !== 0) {
      writer.uint32(10).bytes(message.chunk);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoadSnapshotChunkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoadSnapshotChunkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chunk = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoadSnapshotChunkResponse {
    return { chunk: isSet(object.chunk) ? bytesFromBase64(object.chunk) : new Uint8Array(0) };
  },

  toJSON(message: LoadSnapshotChunkResponse): unknown {
    const obj: any = {};
    if (message.chunk.length !== 0) {
      obj.chunk = base64FromBytes(message.chunk);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoadSnapshotChunkResponse>, I>>(base?: I): LoadSnapshotChunkResponse {
    return LoadSnapshotChunkResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoadSnapshotChunkResponse>, I>>(object: I): LoadSnapshotChunkResponse {
    const message = createBaseLoadSnapshotChunkResponse();
    message.chunk = object.chunk ?? new Uint8Array(0);
    return message;
  },
};

function createBaseApplySnapshotChunkResponse(): ApplySnapshotChunkResponse {
  return { result: 0, refetchChunks: [], rejectSenders: [] };
}

export const ApplySnapshotChunkResponse: MessageFns<ApplySnapshotChunkResponse> = {
  encode(message: ApplySnapshotChunkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== 0) {
      writer.uint32(8).int32(message.result);
    }
    writer.uint32(18).fork();
    for (const v of message.refetchChunks) {
      writer.uint32(v);
    }
    writer.join();
    for (const v of message.rejectSenders) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplySnapshotChunkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplySnapshotChunkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.refetchChunks.push(reader.uint32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.refetchChunks.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rejectSenders.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplySnapshotChunkResponse {
    return {
      result: isSet(object.result) ? applySnapshotChunkResultFromJSON(object.result) : 0,
      refetchChunks: globalThis.Array.isArray(object?.refetchChunks)
        ? object.refetchChunks.map((e: any) => globalThis.Number(e))
        : [],
      rejectSenders: globalThis.Array.isArray(object?.rejectSenders)
        ? object.rejectSenders.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ApplySnapshotChunkResponse): unknown {
    const obj: any = {};
    if (message.result !== 0) {
      obj.result = applySnapshotChunkResultToJSON(message.result);
    }
    if (message.refetchChunks?.length) {
      obj.refetchChunks = message.refetchChunks.map((e) => Math.round(e));
    }
    if (message.rejectSenders?.length) {
      obj.rejectSenders = message.rejectSenders;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplySnapshotChunkResponse>, I>>(base?: I): ApplySnapshotChunkResponse {
    return ApplySnapshotChunkResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplySnapshotChunkResponse>, I>>(object: I): ApplySnapshotChunkResponse {
    const message = createBaseApplySnapshotChunkResponse();
    message.result = object.result ?? 0;
    message.refetchChunks = object.refetchChunks?.map((e) => e) || [];
    message.rejectSenders = object.rejectSenders?.map((e) => e) || [];
    return message;
  },
};

function createBasePrepareProposalResponse(): PrepareProposalResponse {
  return { txs: [] };
}

export const PrepareProposalResponse: MessageFns<PrepareProposalResponse> = {
  encode(message: PrepareProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.txs) {
      writer.uint32(10).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrepareProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrepareProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txs.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrepareProposalResponse {
    return { txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => bytesFromBase64(e)) : [] };
  },

  toJSON(message: PrepareProposalResponse): unknown {
    const obj: any = {};
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrepareProposalResponse>, I>>(base?: I): PrepareProposalResponse {
    return PrepareProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrepareProposalResponse>, I>>(object: I): PrepareProposalResponse {
    const message = createBasePrepareProposalResponse();
    message.txs = object.txs?.map((e) => e) || [];
    return message;
  },
};

function createBaseProcessProposalResponse(): ProcessProposalResponse {
  return { status: 0 };
}

export const ProcessProposalResponse: MessageFns<ProcessProposalResponse> = {
  encode(message: ProcessProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessProposalResponse {
    return { status: isSet(object.status) ? processProposalStatusFromJSON(object.status) : 0 };
  },

  toJSON(message: ProcessProposalResponse): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = processProposalStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessProposalResponse>, I>>(base?: I): ProcessProposalResponse {
    return ProcessProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessProposalResponse>, I>>(object: I): ProcessProposalResponse {
    const message = createBaseProcessProposalResponse();
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseExtendVoteResponse(): ExtendVoteResponse {
  return { voteExtension: new Uint8Array(0), nonRpExtension: new Uint8Array(0) };
}

export const ExtendVoteResponse: MessageFns<ExtendVoteResponse> = {
  encode(message: ExtendVoteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.voteExtension.length !== 0) {
      writer.uint32(10).bytes(message.voteExtension);
    }
    if (message.nonRpExtension.length !== 0) {
      writer.uint32(18).bytes(message.nonRpExtension);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtendVoteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtendVoteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.voteExtension = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nonRpExtension = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtendVoteResponse {
    return {
      voteExtension: isSet(object.voteExtension) ? bytesFromBase64(object.voteExtension) : new Uint8Array(0),
      nonRpExtension: isSet(object.nonRpExtension) ? bytesFromBase64(object.nonRpExtension) : new Uint8Array(0),
    };
  },

  toJSON(message: ExtendVoteResponse): unknown {
    const obj: any = {};
    if (message.voteExtension.length !== 0) {
      obj.voteExtension = base64FromBytes(message.voteExtension);
    }
    if (message.nonRpExtension.length !== 0) {
      obj.nonRpExtension = base64FromBytes(message.nonRpExtension);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtendVoteResponse>, I>>(base?: I): ExtendVoteResponse {
    return ExtendVoteResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtendVoteResponse>, I>>(object: I): ExtendVoteResponse {
    const message = createBaseExtendVoteResponse();
    message.voteExtension = object.voteExtension ?? new Uint8Array(0);
    message.nonRpExtension = object.nonRpExtension ?? new Uint8Array(0);
    return message;
  },
};

function createBaseVerifyVoteExtensionResponse(): VerifyVoteExtensionResponse {
  return { status: 0 };
}

export const VerifyVoteExtensionResponse: MessageFns<VerifyVoteExtensionResponse> = {
  encode(message: VerifyVoteExtensionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyVoteExtensionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyVoteExtensionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyVoteExtensionResponse {
    return { status: isSet(object.status) ? verifyVoteExtensionStatusFromJSON(object.status) : 0 };
  },

  toJSON(message: VerifyVoteExtensionResponse): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = verifyVoteExtensionStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyVoteExtensionResponse>, I>>(base?: I): VerifyVoteExtensionResponse {
    return VerifyVoteExtensionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyVoteExtensionResponse>, I>>(object: I): VerifyVoteExtensionResponse {
    const message = createBaseVerifyVoteExtensionResponse();
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseFinalizeBlockResponse(): FinalizeBlockResponse {
  return {
    events: [],
    txResults: [],
    validatorUpdates: [],
    consensusParamUpdates: undefined,
    appHash: new Uint8Array(0),
    nextBlockDelay: undefined,
  };
}

export const FinalizeBlockResponse: MessageFns<FinalizeBlockResponse> = {
  encode(message: FinalizeBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.txResults) {
      ExecTxResult.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.validatorUpdates) {
      ValidatorUpdate.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.consensusParamUpdates !== undefined) {
      ConsensusParams.encode(message.consensusParamUpdates, writer.uint32(34).fork()).join();
    }
    if (message.appHash.length !== 0) {
      writer.uint32(42).bytes(message.appHash);
    }
    if (message.nextBlockDelay !== undefined) {
      Duration.encode(message.nextBlockDelay, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FinalizeBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinalizeBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.txResults.push(ExecTxResult.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.validatorUpdates.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.consensusParamUpdates = ConsensusParams.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.appHash = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.nextBlockDelay = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinalizeBlockResponse {
    return {
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
      txResults: globalThis.Array.isArray(object?.txResults)
        ? object.txResults.map((e: any) => ExecTxResult.fromJSON(e))
        : [],
      validatorUpdates: globalThis.Array.isArray(object?.validatorUpdates)
        ? object.validatorUpdates.map((e: any) => ValidatorUpdate.fromJSON(e))
        : [],
      consensusParamUpdates: isSet(object.consensusParamUpdates)
        ? ConsensusParams.fromJSON(object.consensusParamUpdates)
        : undefined,
      appHash: isSet(object.appHash) ? bytesFromBase64(object.appHash) : new Uint8Array(0),
      nextBlockDelay: isSet(object.nextBlockDelay) ? Duration.fromJSON(object.nextBlockDelay) : undefined,
    };
  },

  toJSON(message: FinalizeBlockResponse): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    if (message.txResults?.length) {
      obj.txResults = message.txResults.map((e) => ExecTxResult.toJSON(e));
    }
    if (message.validatorUpdates?.length) {
      obj.validatorUpdates = message.validatorUpdates.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.consensusParamUpdates !== undefined) {
      obj.consensusParamUpdates = ConsensusParams.toJSON(message.consensusParamUpdates);
    }
    if (message.appHash.length !== 0) {
      obj.appHash = base64FromBytes(message.appHash);
    }
    if (message.nextBlockDelay !== undefined) {
      obj.nextBlockDelay = Duration.toJSON(message.nextBlockDelay);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FinalizeBlockResponse>, I>>(base?: I): FinalizeBlockResponse {
    return FinalizeBlockResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FinalizeBlockResponse>, I>>(object: I): FinalizeBlockResponse {
    const message = createBaseFinalizeBlockResponse();
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    message.txResults = object.txResults?.map((e) => ExecTxResult.fromPartial(e)) || [];
    message.validatorUpdates = object.validatorUpdates?.map((e) => ValidatorUpdate.fromPartial(e)) || [];
    message.consensusParamUpdates =
      (object.consensusParamUpdates !== undefined && object.consensusParamUpdates !== null)
        ? ConsensusParams.fromPartial(object.consensusParamUpdates)
        : undefined;
    message.appHash = object.appHash ?? new Uint8Array(0);
    message.nextBlockDelay = (object.nextBlockDelay !== undefined && object.nextBlockDelay !== null)
      ? Duration.fromPartial(object.nextBlockDelay)
      : undefined;
    return message;
  },
};

function createBaseCommitInfo(): CommitInfo {
  return { round: 0, votes: [] };
}

export const CommitInfo: MessageFns<CommitInfo> = {
  encode(message: CommitInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.round !== 0) {
      writer.uint32(8).int32(message.round);
    }
    for (const v of message.votes) {
      VoteInfo.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommitInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.round = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.votes.push(VoteInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommitInfo {
    return {
      round: isSet(object.round) ? globalThis.Number(object.round) : 0,
      votes: globalThis.Array.isArray(object?.votes) ? object.votes.map((e: any) => VoteInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: CommitInfo): unknown {
    const obj: any = {};
    if (message.round !== 0) {
      obj.round = Math.round(message.round);
    }
    if (message.votes?.length) {
      obj.votes = message.votes.map((e) => VoteInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommitInfo>, I>>(base?: I): CommitInfo {
    return CommitInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommitInfo>, I>>(object: I): CommitInfo {
    const message = createBaseCommitInfo();
    message.round = object.round ?? 0;
    message.votes = object.votes?.map((e) => VoteInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExtendedCommitInfo(): ExtendedCommitInfo {
  return { round: 0, votes: [] };
}

export const ExtendedCommitInfo: MessageFns<ExtendedCommitInfo> = {
  encode(message: ExtendedCommitInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.round !== 0) {
      writer.uint32(8).int32(message.round);
    }
    for (const v of message.votes) {
      ExtendedVoteInfo.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtendedCommitInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtendedCommitInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.round = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.votes.push(ExtendedVoteInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtendedCommitInfo {
    return {
      round: isSet(object.round) ? globalThis.Number(object.round) : 0,
      votes: globalThis.Array.isArray(object?.votes) ? object.votes.map((e: any) => ExtendedVoteInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: ExtendedCommitInfo): unknown {
    const obj: any = {};
    if (message.round !== 0) {
      obj.round = Math.round(message.round);
    }
    if (message.votes?.length) {
      obj.votes = message.votes.map((e) => ExtendedVoteInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtendedCommitInfo>, I>>(base?: I): ExtendedCommitInfo {
    return ExtendedCommitInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtendedCommitInfo>, I>>(object: I): ExtendedCommitInfo {
    const message = createBaseExtendedCommitInfo();
    message.round = object.round ?? 0;
    message.votes = object.votes?.map((e) => ExtendedVoteInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEvent(): Event {
  return { type: "", attributes: [] };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    for (const v of message.attributes) {
      EventAttribute.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attributes.push(EventAttribute.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => EventAttribute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => EventAttribute.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.type = object.type ?? "";
    message.attributes = object.attributes?.map((e) => EventAttribute.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEventAttribute(): EventAttribute {
  return { key: "", value: "", index: false };
}

export const EventAttribute: MessageFns<EventAttribute> = {
  encode(message: EventAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.index !== false) {
      writer.uint32(24).bool(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.index = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAttribute {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      index: isSet(object.index) ? globalThis.Boolean(object.index) : false,
    };
  },

  toJSON(message: EventAttribute): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.index !== false) {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAttribute>, I>>(base?: I): EventAttribute {
    return EventAttribute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAttribute>, I>>(object: I): EventAttribute {
    const message = createBaseEventAttribute();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    message.index = object.index ?? false;
    return message;
  },
};

function createBaseExecTxResult(): ExecTxResult {
  return { code: 0, data: new Uint8Array(0), log: "", info: "", gasWanted: 0, gasUsed: 0, events: [], codespace: "" };
}

export const ExecTxResult: MessageFns<ExecTxResult> = {
  encode(message: ExecTxResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    if (message.log !== "") {
      writer.uint32(26).string(message.log);
    }
    if (message.info !== "") {
      writer.uint32(34).string(message.info);
    }
    if (message.gasWanted !== 0) {
      writer.uint32(40).int64(message.gasWanted);
    }
    if (message.gasUsed !== 0) {
      writer.uint32(48).int64(message.gasUsed);
    }
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.codespace !== "") {
      writer.uint32(66).string(message.codespace);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecTxResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecTxResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.log = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.info = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.gasWanted = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.gasUsed = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.codespace = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecTxResult {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      log: isSet(object.log) ? globalThis.String(object.log) : "",
      info: isSet(object.info) ? globalThis.String(object.info) : "",
      gasWanted: isSet(object.gas_wanted) ? globalThis.Number(object.gas_wanted) : 0,
      gasUsed: isSet(object.gas_used) ? globalThis.Number(object.gas_used) : 0,
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
      codespace: isSet(object.codespace) ? globalThis.String(object.codespace) : "",
    };
  },

  toJSON(message: ExecTxResult): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.log !== "") {
      obj.log = message.log;
    }
    if (message.info !== "") {
      obj.info = message.info;
    }
    if (message.gasWanted !== 0) {
      obj.gas_wanted = Math.round(message.gasWanted);
    }
    if (message.gasUsed !== 0) {
      obj.gas_used = Math.round(message.gasUsed);
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    if (message.codespace !== "") {
      obj.codespace = message.codespace;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecTxResult>, I>>(base?: I): ExecTxResult {
    return ExecTxResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecTxResult>, I>>(object: I): ExecTxResult {
    const message = createBaseExecTxResult();
    message.code = object.code ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    message.log = object.log ?? "";
    message.info = object.info ?? "";
    message.gasWanted = object.gasWanted ?? 0;
    message.gasUsed = object.gasUsed ?? 0;
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    message.codespace = object.codespace ?? "";
    return message;
  },
};

function createBaseTxResult(): TxResult {
  return { height: 0, index: 0, tx: new Uint8Array(0), result: undefined };
}

export const TxResult: MessageFns<TxResult> = {
  encode(message: TxResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.height !== 0) {
      writer.uint32(8).int64(message.height);
    }
    if (message.index !== 0) {
      writer.uint32(16).uint32(message.index);
    }
    if (message.tx.length !== 0) {
      writer.uint32(26).bytes(message.tx);
    }
    if (message.result !== undefined) {
      ExecTxResult.encode(message.result, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TxResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTxResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.height = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.index = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tx = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.result = ExecTxResult.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TxResult {
    return {
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      tx: isSet(object.tx) ? bytesFromBase64(object.tx) : new Uint8Array(0),
      result: isSet(object.result) ? ExecTxResult.fromJSON(object.result) : undefined,
    };
  },

  toJSON(message: TxResult): unknown {
    const obj: any = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.tx.length !== 0) {
      obj.tx = base64FromBytes(message.tx);
    }
    if (message.result !== undefined) {
      obj.result = ExecTxResult.toJSON(message.result);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TxResult>, I>>(base?: I): TxResult {
    return TxResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TxResult>, I>>(object: I): TxResult {
    const message = createBaseTxResult();
    message.height = object.height ?? 0;
    message.index = object.index ?? 0;
    message.tx = object.tx ?? new Uint8Array(0);
    message.result = (object.result !== undefined && object.result !== null)
      ? ExecTxResult.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseValidator(): Validator {
  return { address: new Uint8Array(0), power: 0 };
}

export const Validator: MessageFns<Validator> = {
  encode(message: Validator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    if (message.power !== 0) {
      writer.uint32(24).int64(message.power);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Validator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.power = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Validator {
    return {
      address: isSet(object.address) ? bytesFromBase64(object.address) : new Uint8Array(0),
      power: isSet(object.power) ? globalThis.Number(object.power) : 0,
    };
  },

  toJSON(message: Validator): unknown {
    const obj: any = {};
    if (message.address.length !== 0) {
      obj.address = base64FromBytes(message.address);
    }
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Validator>, I>>(base?: I): Validator {
    return Validator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Validator>, I>>(object: I): Validator {
    const message = createBaseValidator();
    message.address = object.address ?? new Uint8Array(0);
    message.power = object.power ?? 0;
    return message;
  },
};

function createBaseValidatorUpdate(): ValidatorUpdate {
  return { power: 0, pubKeyBytes: new Uint8Array(0), pubKeyType: "" };
}

export const ValidatorUpdate: MessageFns<ValidatorUpdate> = {
  encode(message: ValidatorUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.power !== 0) {
      writer.uint32(16).int64(message.power);
    }
    if (message.pubKeyBytes.length !== 0) {
      writer.uint32(26).bytes(message.pubKeyBytes);
    }
    if (message.pubKeyType !== "") {
      writer.uint32(34).string(message.pubKeyType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidatorUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.power = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pubKeyBytes = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.pubKeyType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorUpdate {
    return {
      power: isSet(object.power) ? globalThis.Number(object.power) : 0,
      pubKeyBytes: isSet(object.pubKeyBytes) ? bytesFromBase64(object.pubKeyBytes) : new Uint8Array(0),
      pubKeyType: isSet(object.pubKeyType) ? globalThis.String(object.pubKeyType) : "",
    };
  },

  toJSON(message: ValidatorUpdate): unknown {
    const obj: any = {};
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    if (message.pubKeyBytes.length !== 0) {
      obj.pubKeyBytes = base64FromBytes(message.pubKeyBytes);
    }
    if (message.pubKeyType !== "") {
      obj.pubKeyType = message.pubKeyType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidatorUpdate>, I>>(base?: I): ValidatorUpdate {
    return ValidatorUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidatorUpdate>, I>>(object: I): ValidatorUpdate {
    const message = createBaseValidatorUpdate();
    message.power = object.power ?? 0;
    message.pubKeyBytes = object.pubKeyBytes ?? new Uint8Array(0);
    message.pubKeyType = object.pubKeyType ?? "";
    return message;
  },
};

function createBaseVoteInfo(): VoteInfo {
  return { validator: undefined, blockIdFlag: 0 };
}

export const VoteInfo: MessageFns<VoteInfo> = {
  encode(message: VoteInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.validator !== undefined) {
      Validator.encode(message.validator, writer.uint32(10).fork()).join();
    }
    if (message.blockIdFlag !== 0) {
      writer.uint32(24).int32(message.blockIdFlag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VoteInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoteInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.validator = Validator.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blockIdFlag = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VoteInfo {
    return {
      validator: isSet(object.validator) ? Validator.fromJSON(object.validator) : undefined,
      blockIdFlag: isSet(object.blockIdFlag) ? blockIDFlagFromJSON(object.blockIdFlag) : 0,
    };
  },

  toJSON(message: VoteInfo): unknown {
    const obj: any = {};
    if (message.validator !== undefined) {
      obj.validator = Validator.toJSON(message.validator);
    }
    if (message.blockIdFlag !== 0) {
      obj.blockIdFlag = blockIDFlagToJSON(message.blockIdFlag);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VoteInfo>, I>>(base?: I): VoteInfo {
    return VoteInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VoteInfo>, I>>(object: I): VoteInfo {
    const message = createBaseVoteInfo();
    message.validator = (object.validator !== undefined && object.validator !== null)
      ? Validator.fromPartial(object.validator)
      : undefined;
    message.blockIdFlag = object.blockIdFlag ?? 0;
    return message;
  },
};

function createBaseExtendedVoteInfo(): ExtendedVoteInfo {
  return {
    validator: undefined,
    voteExtension: new Uint8Array(0),
    extensionSignature: new Uint8Array(0),
    blockIdFlag: 0,
    nonRpVoteExtension: new Uint8Array(0),
    nonRpExtensionSignature: new Uint8Array(0),
  };
}

export const ExtendedVoteInfo: MessageFns<ExtendedVoteInfo> = {
  encode(message: ExtendedVoteInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.validator !== undefined) {
      Validator.encode(message.validator, writer.uint32(10).fork()).join();
    }
    if (message.voteExtension.length !== 0) {
      writer.uint32(26).bytes(message.voteExtension);
    }
    if (message.extensionSignature.length !== 0) {
      writer.uint32(34).bytes(message.extensionSignature);
    }
    if (message.blockIdFlag !== 0) {
      writer.uint32(40).int32(message.blockIdFlag);
    }
    if (message.nonRpVoteExtension.length !== 0) {
      writer.uint32(50).bytes(message.nonRpVoteExtension);
    }
    if (message.nonRpExtensionSignature.length !== 0) {
      writer.uint32(58).bytes(message.nonRpExtensionSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtendedVoteInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtendedVoteInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.validator = Validator.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.voteExtension = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.extensionSignature = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.blockIdFlag = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.nonRpVoteExtension = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.nonRpExtensionSignature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtendedVoteInfo {
    return {
      validator: isSet(object.validator) ? Validator.fromJSON(object.validator) : undefined,
      voteExtension: isSet(object.voteExtension) ? bytesFromBase64(object.voteExtension) : new Uint8Array(0),
      extensionSignature: isSet(object.extensionSignature)
        ? bytesFromBase64(object.extensionSignature)
        : new Uint8Array(0),
      blockIdFlag: isSet(object.blockIdFlag) ? blockIDFlagFromJSON(object.blockIdFlag) : 0,
      nonRpVoteExtension: isSet(object.nonRpVoteExtension)
        ? bytesFromBase64(object.nonRpVoteExtension)
        : new Uint8Array(0),
      nonRpExtensionSignature: isSet(object.nonRpExtensionSignature)
        ? bytesFromBase64(object.nonRpExtensionSignature)
        : new Uint8Array(0),
    };
  },

  toJSON(message: ExtendedVoteInfo): unknown {
    const obj: any = {};
    if (message.validator !== undefined) {
      obj.validator = Validator.toJSON(message.validator);
    }
    if (message.voteExtension.length !== 0) {
      obj.voteExtension = base64FromBytes(message.voteExtension);
    }
    if (message.extensionSignature.length !== 0) {
      obj.extensionSignature = base64FromBytes(message.extensionSignature);
    }
    if (message.blockIdFlag !== 0) {
      obj.blockIdFlag = blockIDFlagToJSON(message.blockIdFlag);
    }
    if (message.nonRpVoteExtension.length !== 0) {
      obj.nonRpVoteExtension = base64FromBytes(message.nonRpVoteExtension);
    }
    if (message.nonRpExtensionSignature.length !== 0) {
      obj.nonRpExtensionSignature = base64FromBytes(message.nonRpExtensionSignature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtendedVoteInfo>, I>>(base?: I): ExtendedVoteInfo {
    return ExtendedVoteInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtendedVoteInfo>, I>>(object: I): ExtendedVoteInfo {
    const message = createBaseExtendedVoteInfo();
    message.validator = (object.validator !== undefined && object.validator !== null)
      ? Validator.fromPartial(object.validator)
      : undefined;
    message.voteExtension = object.voteExtension ?? new Uint8Array(0);
    message.extensionSignature = object.extensionSignature ?? new Uint8Array(0);
    message.blockIdFlag = object.blockIdFlag ?? 0;
    message.nonRpVoteExtension = object.nonRpVoteExtension ?? new Uint8Array(0);
    message.nonRpExtensionSignature = object.nonRpExtensionSignature ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMisbehavior(): Misbehavior {
  return { type: 0, validator: undefined, height: 0, time: undefined, totalVotingPower: 0 };
}

export const Misbehavior: MessageFns<Misbehavior> = {
  encode(message: Misbehavior, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.validator !== undefined) {
      Validator.encode(message.validator, writer.uint32(18).fork()).join();
    }
    if (message.height !== 0) {
      writer.uint32(24).int64(message.height);
    }
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(34).fork()).join();
    }
    if (message.totalVotingPower !== 0) {
      writer.uint32(40).int64(message.totalVotingPower);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Misbehavior {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMisbehavior();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validator = Validator.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.totalVotingPower = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Misbehavior {
    return {
      type: isSet(object.type) ? misbehaviorTypeFromJSON(object.type) : 0,
      validator: isSet(object.validator) ? Validator.fromJSON(object.validator) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
      totalVotingPower: isSet(object.totalVotingPower) ? globalThis.Number(object.totalVotingPower) : 0,
    };
  },

  toJSON(message: Misbehavior): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = misbehaviorTypeToJSON(message.type);
    }
    if (message.validator !== undefined) {
      obj.validator = Validator.toJSON(message.validator);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.time !== undefined) {
      obj.time = message.time.toISOString();
    }
    if (message.totalVotingPower !== 0) {
      obj.totalVotingPower = Math.round(message.totalVotingPower);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Misbehavior>, I>>(base?: I): Misbehavior {
    return Misbehavior.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Misbehavior>, I>>(object: I): Misbehavior {
    const message = createBaseMisbehavior();
    message.type = object.type ?? 0;
    message.validator = (object.validator !== undefined && object.validator !== null)
      ? Validator.fromPartial(object.validator)
      : undefined;
    message.height = object.height ?? 0;
    message.time = object.time ?? undefined;
    message.totalVotingPower = object.totalVotingPower ?? 0;
    return message;
  },
};

function createBaseSnapshot(): Snapshot {
  return { height: 0, format: 0, chunks: 0, hash: new Uint8Array(0), metadata: new Uint8Array(0) };
}

export const Snapshot: MessageFns<Snapshot> = {
  encode(message: Snapshot, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.height !== 0) {
      writer.uint32(8).uint64(message.height);
    }
    if (message.format !== 0) {
      writer.uint32(16).uint32(message.format);
    }
    if (message.chunks !== 0) {
      writer.uint32(24).uint32(message.chunks);
    }
    if (message.hash.length !== 0) {
      writer.uint32(34).bytes(message.hash);
    }
    if (message.metadata.length !== 0) {
      writer.uint32(42).bytes(message.metadata);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Snapshot {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.height = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.format = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.chunks = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Snapshot {
    return {
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      format: isSet(object.format) ? globalThis.Number(object.format) : 0,
      chunks: isSet(object.chunks) ? globalThis.Number(object.chunks) : 0,
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
      metadata: isSet(object.metadata) ? bytesFromBase64(object.metadata) : new Uint8Array(0),
    };
  },

  toJSON(message: Snapshot): unknown {
    const obj: any = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.format !== 0) {
      obj.format = Math.round(message.format);
    }
    if (message.chunks !== 0) {
      obj.chunks = Math.round(message.chunks);
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.metadata.length !== 0) {
      obj.metadata = base64FromBytes(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Snapshot>, I>>(base?: I): Snapshot {
    return Snapshot.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Snapshot>, I>>(object: I): Snapshot {
    const message = createBaseSnapshot();
    message.height = object.height ?? 0;
    message.format = object.format ?? 0;
    message.chunks = object.chunks ?? 0;
    message.hash = object.hash ?? new Uint8Array(0);
    message.metadata = object.metadata ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
