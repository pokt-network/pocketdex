#!/bin/sh

set -e

export TERM=xterm-256color

warning_log() {
  printf "\033[1;33m[WARN]\033[0m $1\n"
}

error_log() {
  printf "\033[1;31m[ERROR]\033[0m $1\n"
}

info_log() {
  printf "\033[1;32m[INFO]\033[0m $1\n"
}

update_project() {
  if [ ! -f "project.yaml" ]; then
    warning_log "Unable to update project.yaml because the file was not found. Maybe this was called before project.yaml was generated by the build?"
    return
  fi

  # perform any updates that are required based on the environment variables
  if [ ! -z "${START_BLOCK}" ]; then
      info_log "[Config Update] Start Block: ${START_BLOCK}"
      yq -i '.dataSources[].startBlock = env(START_BLOCK)' project.yaml
  fi

  if [ ! -z "${CHAIN_ID}" ]; then
      info_log "[Config Update] Chain ID: ${CHAIN_ID}"
      yq -i '.network.chainId = strenv(CHAIN_ID)' project.yaml
  fi

  if [ ! -z "${ENDPOINT}" ]; then
      info_log "[Config Update] Network Endpoint: ${ENDPOINT}"
      yq -i '.network.endpoint = strenv(ENDPOINT)' project.yaml
  fi
}

get_params() {
    local params=""

# NOTE: this will keep disable until SubQuery team fix the performance issue with sandbox and workers if they does.
#    if [ -n "$WORKERS" ]; then
#        params="--workers=$WORKERS"
#    fi
    if [ -n "$BATCH_SIZE" ]; then
        params="${params} --batch-size=$BATCH_SIZE"
    fi
    if [ -n "$DB_SCHEMA" ]; then
        params="${params} --db-schema=$DB_SCHEMA"
    fi
    echo "$params"
}

get_env_file_name(){
  if [ -z "$1" ]
  then
    # default to development
    file=".env.development"
  else
    file=".env.$1"
  fi
  echo "$file"
}
